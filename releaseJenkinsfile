#!/usr/bin/env groovy
import groovy.json.JsonOutput
import devops.waves.*
@Library('jenkins-shared-lib')

ut = new utils()

def artifactsDir="out"
def networks
def artifacts
def shaSumField = "## SHA256 Checksums\n```\n"
def user = "wavesplatform"
def repo = "Waves"
def repo_url = "https://github.com/${user}/${repo}"


properties([

    ut.buildDiscarderPropertyObject('14', '30'),

    parameters([
        ut.stringParameterDefinitionObject('tag','v0.0.0'),
        ut.gitParameterDefinitionObject('branch', 'origin/(version-.*)', 'ASCENDING_SMART', 'NONE', repo_url),
        ut.extendedChoiceParameterDefinitionObject("network", "mainnet,testnet,stagenet", "mainnet", 0, "" )
    ]) 
])

stage('Build information'){
    if (! params.tag || params.branch.contains('No values in a list') || ! params.network )
    {
        echo "Aborting this build. Please run it again with the required parameters specified"
        currentBuild.result = Constants.PIPELINE_ABORTED
        return
    }
    else
    {
        networks = network.split(',').collect{it.toLowerCase()}
         echo "Parameters are specified:\n" +
        "network: ${networks}\n" +
        "branch: ${branch}\n" +
        "tag: ${tag}"
    }
}

if (currentBuild.result == Constants.PIPELINE_ABORTED){
    return
}

node('wavesnode'){
    currentBuild.result = Constants.PIPELINE_SUCCESS

    timestamps {
        wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
            try {
                currentBuild.displayName = "#${env.BUILD_NUMBER} - ${branch} - release ${tag}"

                stage('Checkout') {
                    sh 'env'
                    step([$class: 'WsCleanup'])
                    ut.checkout(branch, repo_url)
                    sh "mkdir -p ${artifactsDir}/all"
                }

                stage ('Build artifacts'){
                    sh "git tag -a '${tag}' -m 'Jenkins #${env.BUILD_NUMBER} - ${branch} - release ${tag}'"
                    networks.each {
                    withEnv(["SBT_OPTS=-Xmx2g -XX:MaxPermSize=256m -XX:ReservedCodeCacheSize=128m -Dnetwork=${it.toLowerCase()}"]) {
                        ut.sbt 'clean packageAll'
                    }

                    def filter = (it == 'mainnet') ? '' : it

                    sh """
                        mkdir -p ${artifactsDir}/${it}

                        cp node/target/waves-all-*.jar ${artifactsDir}/all/

                        find grpc-server/target/universal/ -name *${filter}*.tgz | grep -q . && \
                            cp grpc-server/target/universal/*${filter}*.tgz ${artifactsDir}/all/ || true

                        find node/target/ -name waves*${filter}*all.deb | grep -q . && \
                            cp node/target/waves*${filter}*all.deb ${artifactsDir}/${it}/ || true

                        find grpc-server/target/ -name *${filter}*.deb | grep -q . && \
                            cp grpc-server/target/*${filter}*.deb ${artifactsDir}/${it}/ || true

                        find ${artifactsDir}/${it}/ -name *.deb | grep -q . && \
                            cp ${artifactsDir}/${it}/*.deb ${artifactsDir}/all/ || true
                        """
                    }
                    dir (artifactsDir + '/all'){
                        artifacts = findFiles(glob: '**/*')
                        artifacts.each{
                            shaSumField += ut.shWithOutput("shasum -a 256 ${it.name}") + "\n"
                        }
                    }
                }

                stage ('Create a release'){
                    withCredentials([string(credentialsId: 'waves-release-github-token', variable: 'token')]) {
                        dir (artifactsDir + '/all'){
                            def createReleaseBody = [
                                tag_name: "${tag}",
                                target_commitish: "${branch}",
                                name: "Version ${tag.replace('v','')} (${networks.collect{ it.capitalize() }.join(" + ")})",
                                body: "# In this release\n${shaSumField}```",
                                draft: true,
                                prerelease: false]
                            def createReleaseBodyJson = JsonOutput.toJson(createReleaseBody)
                            def createReleaseUrl = "https://api.github.com/repos/${user}/${repo}/releases"
                            def id = ut.shWithOutput "curl -s -H 'Authorization:token ${token}' -X 'POST' -H 'Content-Type: application/json' -d '${createReleaseBodyJson}' ${createReleaseUrl} | grep -m 1 'id.:' | tr -cd '[0-9]='"

                            artifacts.each{
                                def contentType = (it.name.contains('tgz')) ? "application/gzip" : "application/octet-stream"
                                def uploadAssetsUrl = "https://uploads.github.com/repos/${user}/${repo}/releases/${id}/assets?name=${it.name}"
                                sh "curl -s -H 'Authorization:token ${token}' -X 'POST' -H 'Content-Type: ${contentType}' --data-binary @${it.name} ${uploadAssetsUrl}"
                            }
                        }
                    }
                }

                withCredentials([sshUserPrivateKey(credentialsId: Constants.DEPLOYBOT_CREDS_ID, keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                    def remote = [:]
                    remote.host = Constants.APT_REPO_CONTROLLER_SERVER
                    remote.name = Constants.APT_REPO_CONTROLLER_SERVER
                    remote.user = userName
                    remote.identityFile = identity
                    remote.allowAnyHosts = true
                    stage ('Updating APT repo'){
                        networks.each {
                            ut.remotePut(remote, "${artifactsDir}/${it}", Constants.APT_PUBLISH_DIR)
                        }
                        ut.remoteExec (remote, "${Constants.APT_PUBLISH_DIR}/publish.sh")
                    }
                }
            }
            catch (err) {
                currentBuild.result = Constants.PIPELINE_FAILURE
                println("ERROR caught")
                println(err)
                println(err.getMessage())
                println(err.getStackTrace())
                println(err.getCause())
                println(err.getLocalizedMessage())
                println(err.toString())
            }
            finally{
                sh "tar -czvf artifacts.tar.gz -C ${artifactsDir} ."
                // archiveArtifacts artifacts: 'artifacts.tar.gz'
                ut.notifySlack("jenkins-notifications", currentBuild.result)
            }
        }
    }
}
