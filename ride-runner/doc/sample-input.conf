# An address of dApp as Base58 encoded bytes.
# Required.
address = "3PCH3sUqeiPFAhrKzEnSEXoE2B6G9YNromV"

# What to evaluate.
# Required.
# Either "Expression evaluation" or "Function evaluation" should be specified, but not both.
request {
  # Expression evaluation.
  # Doesn't support payments.
  // expr = "foo(1)"

  # All fields below relate to Function evaluation.

  # Function evaluation.
  # Represents FUNCTION_CALL in RIDE.
  call {
    # Function name.
    # Required.
    function = foo

    # Optional, empty list if not specified.
    args = [
      {
        type = integer # boolean | string | binary | list
        value = 1 # RIDE constant according to specified type
      }
    ]
  }

  # Provides PublicKey for `this` (as Address) in RIDE and enables payments.
  # Optional, public key with empty bytes ("11111111111111111111111111111111") if not specified.
  senderPublicKey = "EJ67f6UsZ59Su6gHSWDGeJEF7AhxJMwaDvgMVcPKvS1G"

  # Provides Address for `this` in RIDE.
  # Ignored if senderPublicKey is specified.
  # Optional, address with empty bytes ("11111111111111111111111111111111") if not specified.
  // sender = "3PP2fh5162huUzvKywTBD3W3X7xzdXwf47e"

  # Optional, empty list if not specified.
  # Note: it works only with senderPublicKey.
  # Note: there is no "s" in the end.
  payment = [
    {
      # Amount of payment in atomic unit of asset ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
      # Required.
      amount = 1

      # Asset id as Base58 encoded bytes.
      # Optional, WAVES if not specified.
      # "" and null are represented as WAVES.
      # Note: "WAVES" is parsed as issued asset id, not WAVES asset.
      assetId = "8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS"
    }
  ]
}

# Network identification.
# Optional, T if not specified
chainId = W

# Include variables values and other RIDE debug information.
# Optional, false by default.
// trace = true

# The limit of complexity of a function that is not Callable.
# Optional, 2147483647 by default.
// evaluateScriptComplexityLimit = 52000

# Maximum size of validation error log.
# Optional, 1024 by default (1 KiB).
// maxTxErrorLogSize = 1024

# Blockchain height during evaluation.
height = 3296627

# Features those are enabled on height before specified (height - 1). See BlockchainFeatures for a list of features.
# Optional, all implemented features at the moment of release of this tool by default.
// features = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]

# Dictionary "Account address as Base58 encoded bytes" -> Account state.
# Optional, no accounts by default.
accounts {
  "3PCH3sUqeiPFAhrKzEnSEXoE2B6G9YNromV" {
    # Dictionary "Asset id" -> balance in atomic unit of asset ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
    # "Asset id" as a Base58 encoded bytes. "WAVES" is WAVES asset.
    # Optional, empty by default.
    balance {
      WAVES = 500100
      "8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS" = 1
    }

    # Optional, empty by default.
    leasing {
      # Incoming leasing in wavelets, atomic units of WAVES asset ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
      # Optional, 0 by default.
      in = 10

      # Outgoing leasing in wavelets, atomic units of WAVES asset ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
      # Optional, 0 by default.
      out = 100
    }

    # In wavelets, atomic units of WAVES asset ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
    # Optional, 0 by default.
    generatingBalance = 100000000000

    # Account data entries.
    # Dictionary "Key name is a UTF-8 string" -> entry.
    # Optional, no data entries by default.
    # Entry is an object with:
    #   "type", one of: integer | boolean | string | binary.
    #   "value" is an entry value of specified type.
    data {
      a {
        type = integer
        value = 11
      }

      b {
        type = boolean
        value = true # false
      }

      c {
        type = string
        value = "foobarbaz"
      }

      d {
        type = binary

        # Allowed values:
        #   "base64:xxxx" - "xxxx" is Base64 encoded bytes.
        #   "base58:xxxx" or "xxxx" - "xxxx" is Base58 encoded bytes.
        value = "base64:Zm9vYmFyb2Jheg=="
      }
    }

    # Aliases for this account.
    # Allowed values:
    #   "alias:X:xxxx" - "xxxx" is alias name, "X" is chain char.
    #   "alias:xxxx" or "xxxx" - "xxxx" is alias name with default chain.
    # Optional, no aliases by default.
    aliases = ["carl"]

    # Account script.
    # Optional, no script by default.
    scriptInfo {
      # Public key of dApp (this account) as Base58 encoded bytes.
      # Optional, "11111111111111111111111111111111" by default.
      # May be useful for actions validation.
      // publicKey = ""

      # Script of account.
      # If it starts with "base64:" then it is a compiled script.
      # Otherwise it is a source of script and will be compiled internally.
      # Required.
      script = """
        {-# STDLIB_VERSION 6 #-}
        {-# SCRIPT_TYPE ACCOUNT #-}
        {-# CONTENT_TYPE DAPP #-}

        @Callable(inv)
        func foo (x : Int) = {
          let alice = Address(base58'3PCH3sUqeiPFAhrKzEnSEXoE2B6G9YNromV')
          let carl = addressFromRecipient(Alias("carl"))
          let bob = Address(base58'3PP2fh5162huUzvKywTBD3W3X7xzdXwf47e')
          let jane = Address(base58'3P4xDBqzXgR8HyXoyNn1C8Bd88h4rsEBMHA')
          let asset = base58'8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS'
          let txId = base58'8rc5Asw43qbq7LMZ6tu2aVbVkw72XmBt7tTnwMSNfaNq'
          let x1 = getIntegerValue(alice, "a")
          let x2 = 0 # if (isDataStorageUntouched(carl)) then 1 else 0 # Not supported for now
          let x3 = assetBalance(bob, asset)
          let x4 = value(assetInfo(asset)).decimals
          let x5 = value(blockInfoByHeight(3296627)).height
          let x6 = size(value(scriptHash(this)))
          let x7 = value(transactionHeightById(txId))
          let x8 = value(transferTransactionById(txId)).amount
          let x9 = wavesBalance(carl).available
          strict x10 = invoke(this, "bar", nil, nil).exactAs[Int]
          let y1 = height
          let y2 = lastBlock.height
          ([ScriptTransfer(bob, 1, asset)], x + x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + y1 + y2 + 9007199254740991)
        }

        @Callable(inv)
        func bar () = {
          let x1 = if (valueOrElse(getBoolean("b"), false)) then 1 else 0
          (nil, x1)
        }
      """
    }
  }

  "3PP2fh5162huUzvKywTBD3W3X7xzdXwf47e" {
    balance {
      "WAVES" = 500000
      "8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS" = 3
    }
  }
}

# Dictionary "Asset id as Base58 encoded bytes" -> Asset information.
# Optional, no assets by default.
assets {
  "8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS" {
    # Asset issuer public key in Base58 encoded bytes.
    # Optional, "11111111111111111111111111111111" by default.
    // issuerPublicKey = ""

    # Name of asset.
    # Allowed values:
    #   "base64:xxxx" - "xxxx" is Base64 encoded bytes.
    #   "base58:xxxx" - "xxxx" is Base58 encoded bytes.
    #   just "xxxx" is UTF-8 encoded bytes.
    # Optional, "name" by default.
    name = "Bitcoin"

    # Description of asset.
    # Allowed values:
    #   "base64:xxxx" - "xxxx" is Base64 encoded bytes.
    #   "base58:xxxx" - "xxxx" is Base58 encoded bytes.
    #   just "xxxx" is UTF-8 encoded bytes.
    # Optional, "description" by default.
    // description = ""

    # Decimals of asset.
    # Optional, 8 by default.
    // decimals = 8

    # Is asset reissuable?
    # Optional, false by default.
    // reissuable = false

    # Total number of issued assets.
    # Optional, 9007199254740991 by default (in JavaScript: MAX_SAFE_INTEGER).
    quantity = 21000000

    # Not supported for now
    // script = "base64:BQkAAGYAAAACBQAAAAZoZWlnaHQAAAAAAAAAAABXs1wV" # height > 0

    # Sponsorship fee.
    # See for details: https://docs.waves.tech/en/ride/structures/script-actions/sponsor-fee#constructor
    # Optional, 0 by default.
    // minSponsoredAssetFee = 0
  }
}

# Dictionary "height" -> Block information.
# Optional, no blocks by default.
blocks {
  3296627 {
    # Timestamp of block in milliseconds.
    # Optional, now by default.
    timestamp = 1663299568885

    # Base target: https://docs.waves.tech/en/blockchain/block/block-generation/base-target
    # Optional, 130 by default.
    // baseTarget = 130

    # Generator signature as Base58 encoded bytes: https://docs.waves.tech/en/blockchain/block/block-generation/generation-signature
    # Optional, by default TODO
    generationSignature = "CrAWgWGpWcH81bZHchdJsjXe4ngh16dimZ7pjunt7nZvfrf1y3aV1vVZGuijf8CnBrVbmXsZcav4izfySsQDf8d9U43M37674bvwSv5gCB3cERewfwQNFTZhGXFh6dbMbvx"

    # Public key of block generator as Base58 encoded bytes.
    # Optional, "11111111111111111111111111111111" by default.
    generatorPublicKey = "GtZHNJQGy7RDgP3Jym5mCTVDX3FUKDSesikLhLcyytG5"

    # VRF as Base58 encoded bytes: https://tools.ietf.org/html/draft-irtf-cfrg-vrf-04
    # Optional, not specified by default.
    VRF = "GHC3DQuW9ncm5sNy5u3TVEF4CXu1fsLVHVHYxJzuZr7b"
  }
}

# Dictionary "Transaction id as Base58 encoded bytes" -> Transaction information.
# Optional, no transactions by default.
# Only transfer transactions supported for now.
transactions {
  "8rc5Asw43qbq7LMZ6tu2aVbVkw72XmBt7tTnwMSNfaNq" {
    # Amount of transfer in atomic unit of assetId ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
    # Optional, 1 by default.
    amount = 93119130

    # "Asset id" as a Base58 encoded bytes. "WAVES" is WAVES asset.
    # Optional, WAVES by default.
    assetId = "8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS"

    # Amount of fee in atomic unit of feeAssetId ( https://docs.waves.tech/en/blockchain/token/#atomic-unit ).
    # Optional, 1 by default.
    fee = 100000

    # "Fee asset id" as a Base58 encoded bytes. "WAVES" is WAVES asset.
    # Optional, WAVES by default.
    feeAssetId = WAVES

    # Recipient as either address or alias.
    # Allowed values:
    #   "alias:X:xxxx" - "xxxx" is alias name, "X" is chain char.
    #   "alias:xxxx" - "xxxx" is alias name with default chain.
    #   "xxxx" is address.
    # Required.
    recipient = "3PLrCnhKyX5iFbGDxbqqMvea5VAqxMcinPW"

    # Public key of transaction sender as Base58 encoded bytes.
    # Optional, "11111111111111111111111111111111" by default.
    senderPublicKey = "Cmk3MD7BdByhRPAa8BtVzdB8Yst1dXPLcmgUKCwiQy83"

    # Height on which transaction was forged.
    # Optional, input height - 1 by default.
    height = 3281000

    # Timestamp of transaction in millis.
    # Optional, now by default.
    timestamp = 1663299600039

    # A list of proofs.
    # Optional, empty list by default.
    proofs = [
      # Allowed values:
      #   "base64:xxxx" - "xxxx" is Base64 encoded bytes.
      #   "base58:xxxx" - "xxxx" is Base58 encoded bytes.
      #   just "xxxx" is UTF-8 encoded bytes.
      "base58:4m9DDG9ALcWheRjvL7iaGQzsW5iqocz1nSGVxbRYW74LLjPdUXpc6iYZ8NjKyNdCdfv6ePMveFZLv4iYnpu7BhfQ"
    ]

    # Version of transaction.
    # Optional, by default 3.
    // version = 3

    # Allowed values:
    #   "base64:xxxx" - "xxxx" is Base64 encoded bytes.
    #   "base58:xxxx" - "xxxx" is Base58 encoded bytes.
    #   just "xxxx" is UTF-8 encoded bytes.
    # Optional, empty by default.
    attachment = "test"
  }
}

