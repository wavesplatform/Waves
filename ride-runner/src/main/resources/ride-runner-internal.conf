# Internal settings. Change on your own risk.
waves {
  rest-api {
    # CORS headers returned with responses.
    cors-headers {
      # HTTP headers that can be used during the external request.
      access-control-allow-headers = ["Authorization", "Content-Type", "X-Requested-With", "Timestamp", "Signature"]

      # Origin that can access the response from requesting code.
      # By default any websites are able to use HTTP API.
      access-control-allow-origin = "origin-from-request"

      # Allowed methods when accessing a resource.
      access-control-allow-methods = ["OPTIONS", "POST", "PUT", "GET", "DELETE"]

      # Enable/disable exposing the response to the frontend JS code when the request's credentials mode is include.
      access-control-allow-credentials = yes
    }
  }

  # RIDE runner related settings.
  ride-runner {
    # In a cause of Blockchain Updates stream issues.
    delay-before-force-restart-blockchain-updates = 1 s

    db {
      default-column-family {
        bits-per-key = 12

        block-size = 16 KiB

        # Total size of the cache.
        cache-capacity = 256 MiB

        write-buffer-size = 8 MiB

        # The ratio of capacity reserved for high priority blocks (see Wiki of RocksDB).
        high-pri-pool-ratio = 0.6
      }
    }
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO" # | OFF | ERROR | WARNING | INFO | DEBUG
  stdout-loglevel = "WARNING"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Supress not interesting warnings
  http.parsing.ignore-illegal-header-for = ["user-agent"]

  # Custom phases. Do not modify, highly coupled with the code!
  coordinated-shutdown.phases {
    ride-blockchain-updates-stream {
      depends-on = [before-cluster-shutdown] # Akka HTTP-related parts are down
    }

    ride-db {
      depends-on = [ride-blockchain-updates-stream]
    }

    ride-api-client {
      depends-on = [ride-blockchain-updates-stream]
    }

    ride-grpc-connector {
      depends-on = [ride-api-client]
    }

    ride-metrics {
      depends-on = [ride-grpc-connector]
    }

    ride-thread-pools {
      depends-on = [ride-grpc-connector, ride-db]
    }
  }
}

# Performance metrics
kamon {
  # Identification
  environment {
    service = "ride-runner"

    # An unique id to distinguish it from others
    # host = ""
  }

  instrumentation.akka.http.server.metrics.enabled = yes

  modules {
    http-request-span-reporter.enabled = false
    influxdb-span-reporter.enabled = false

    influxdb.enabled = false
    prometheus-reporter.enabled = false
  }

  prometheus.gauges.metrics = [
    "ride.affected.run"
    "ride.request.run"
    "ride.script.calls"
    "grpc.call"
    "blockchain.event.process"
  ]

  metric {
    # An interval within metrics are aggregated. After it, them will be sent to the server
    tick-interval = 10 seconds

    instrument-factory.default-settings.timer {
      lowest-discernible-value = 100000 # 100 microseconds
      highest-trackable-value = 2000000000000 # 200 seconds
      significant-value-digits = 0
    }
  }

  init.hide-banner = true
  # Also see reference.conf of kamon-prometheus: kamon.prometheus.embedded-server
}
