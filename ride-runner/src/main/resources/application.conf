include "ride-runner-akka.conf"
include "ride-runner-kamon.conf"

waves {
  blockchain {
    # Blockchain type: TESTNET | MAINNET | STAGENET | CUSTOM
    type = MAINNET
  }

  rest-api {
    # Network address to bind to
    bind-address = "127.0.0.1"

    # Port to listen to REST API requests
    port = 6890

    # CORS headers returned with responses
    cors-headers {
      # HTTP headers that can be used during the external request
      access-control-allow-headers = ["Authorization", "Content-Type", "X-Requested-With", "Timestamp", "Signature"]

      # Origin that can access the response from requesting code.
      # By default any websites are able to use HTTP API.
      access-control-allow-origin = "origin-from-request"

      # Allowed methods when accessing a resource
      access-control-allow-methods = ["OPTIONS", "POST", "PUT", "GET", "DELETE"]

      # Enable/disable exposing the response to the frontend JS code when the request's credentials mode is include
      access-control-allow-credentials = yes
    }

    # Other settings from Waves node aren't used
  }

  # RIDE runner related settings
  ride-runner {
    # RIDE runner base directory
    directory = ""

    db {
      directory = ${waves.ride-runner.directory}"/data"
    }

    # Enable if you need traces for RIDE scripts, but usually they are big and consume some memory.
    # Isn't recommended to enable on production.
    enable-traces = no

    # The limit of complexity of a function that is not Callable (/utils/script/evaluate)
    complexity-limit = ${waves.rest-api.evaluate-script-complexity-limit}

    # Consider the service as unhealthy if it don't update events in more than this duration.
    # Should be more than no-data-timeout
    unhealthy-idle-timeout = 2m

    # Max number of ride runner pool threads.
    # When not configured explicitly, min(4, Runtime.getRuntime.availableProcessors() * 2) threads are used.
    ride-scheduler-threads = 4

    # The gRPC API could be limited by nGINX rules:
    # http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn
    # If you have such limits, provide here the value of limit_conn.
    # No limits are applied by default.
    # max-concurrent-grpc-requests = 5

    shared-blockchain = {
      blockchain = ${waves.blockchain}
      caches {
        account-data.max-entries = 2000
        account-script.max-entries = 1000
        account-balance.max-entries = 1000
        account-lease.max-entries = 100
        vrf.max-entries = 10
        asset.max-entries = 10
        alias.max-entries = 10
        transaction.max-entries = 10
      }
    }

    immutable-blockchain = ${waves.blockchain}

    endpoints.node {
      rest-api = "https://nodes.wavesnodes.com"
      grpc-api = "grpc.wavesnodes.com:6870"
      blockchain-updates-api = "grpc.wavesnodes.com:6881"
    }

    ### Internal settings. Change on your own risk

    service-api-route {
      # Secure hash in Base58
      # test
      api-key-hash = "JDJkZrg24XwvBgBUi6PgpHzrAFgeefb7nU8LJPRR58ga"
    }

    grpc-connector {
      # By default: min((numOfProcessors * 2), 4)
      executor-threads = 4
    }

    blockchain-api {
      # The only way to get VRF now
      node-api-base-uri = ${waves.ride-runner.endpoints.node.rest-api}

      # gRPC API client related settings
      grpc-api {
        max-concurrent-requests = ${?waves.ride-runner.max-concurrent-grpc-requests}
      }

      # Blockchain Updates client related settings
      blockchain-updates-api {
        # The stream is considered as stucked if we haven't received an event during this time
        no-data-timeout = 90s

        # Back pressured buffer for Blockchain events. Helps to align speed of receiving and processing events
        # Must be > 1
        buffer-size = 2
      }
    }

    requests-service {
      enable-traces = ${waves.ride-runner.enable-traces}
      evaluate-script-complexity-limit = ${waves.ride-runner.complexity-limit}
      max-tx-error-log-size = 1024 # 1 KiB # ${waves.max-tx-error-log-size} # Consumes a lot of memory
      parallelization = ${waves.ride-runner.ride-scheduler-threads}
      cache-ttl = 30s
    }

    grpc-api-channel = ${waves.ride-runner.default-channel}
    grpc-api-channel {
      # Address and port of gRPC server.
      # In order to provide fault-tolerance, consider using DNS server between DEX and Node, which would resolve this
      # address into several endpoints (ips of nodes with DEXExtension installed).
      # Use "dns:///" prefix to specify a domain name
      # target = "mainnet-htz-fsn1-2.wavesnodes.com:6870"
      # target = "mainnet-htz-hel1-1.wavesnodes.com:6870"
      target = ${waves.ride-runner.endpoints.node.grpc-api}
    }

    # Settings for gRPC which is used by the client to interact with Blockchain updates extension.
    # Client for com.wavesplatform.events.BlockchainUpdates
    blockchain-updates-api-channel = ${waves.ride-runner.default-channel}
    blockchain-updates-api-channel {
      # Address and port of gRPC server.
      # In order to provide fault-tolerance, consider using DNS server between DEX and Node, which would resolve this
      # address into several endpoints (ips of nodes with DEXExtension installed).
      # Use "dns:///" prefix to specify a domain name
      target = ${waves.ride-runner.endpoints.node.blockchain-updates-api}
    }

    default-channel {
      # Address and port of gRPC server.
      # In order to provide fault-tolerance, consider using DNS server between this service and Node, which would resolve this
      # address into several endpoints (ips of nodes with DEXExtension installed).
      # Use "dns:///" prefix to specify a domain name
      target = ""

      # Internal gRPC channel settings

      # Sets max number of hedged attempts.
      # Hedging means sending multiple copies of a single request without waiting for a response.
      max-hedged-attempts = 5

      # Sets max number of retry attempts
      max-retry-attempts = 30

      # Sets whether keepalive will be performed when there are no outstanding RPC on a connection
      keep-alive-without-calls = false

      # Sets the time without read activity before sending a keepalive ping.
      # Can't be less than 10s, see io.grpc.internal.KeepAliveManager
      keep-alive-time = 15s

      # Sets the time waiting for read activity after sending a keepalive ping.
      keep-alive-timeout = 5s

      # Set the duration without ongoing RPCs before going to idle mode.
      # See https://github.com/grpc/grpc/blob/master/doc/connectivity-semantics-and-api.md
      idle-timeout = 300d

      # Low level settings for connection
      channel-options {
        # A timeout to setup a connection
        connect-timeout = 5s
      }

      max-inbound-message-size = 8388608 # 8 MiB
    }
  }

  compare {
    # A delay between requests
    requests-delay = 15s

    # How many time we can ignore different responses and failures from hosts
    failed-checks-tolerance-timer = 90s

    # Limit a number of checks
    # max-checks = 3

    ride-api {
      node-api-base-uri = ${waves.ride-runner.endpoints.node.rest-api}

      # Base URI to a RIDE Runner service, e.g. http://localhost:6869
      ride-runner-api-base-uri = ""
    }

    # Sample requests to test in a format address -> body JSON
    test-requests = [
      # ["3P8MoPnsaurofk1VyhsdAFkeQ6ijpJYXCpW", {
      #   "expr": "wxEmissionStatsREADONLY()"
      # }]
    ]
  }
}
