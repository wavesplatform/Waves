include required("waves-public-api.conf")

waves {
  # Blockchain type: TESTNET | MAINNET | CUSTOM.
  blockchain.type = MAINNET

  rest-api {
    # Network address to bind to.
    bind-address = "127.0.0.1" # 0.0.0.0

    # Port to listen to REST API requests.
    port = 6890
  }

  # RIDE runner related settings.
  ride-runner {
    # RIDE runner base directory.
    directory = ""

    # Where all caches stored.
    db.directory = ${waves.ride-runner.directory}"/data"

    # Enable if you need traces for RIDE scripts, but usually they are big and consume much memory.
    enable-traces = no

    # Enable if you need stateChanges for RIDE scripts, but usually they are big and consume much memory.
    enable-state-changes = no

    # The limit of complexity of a function that is not Callable (/utils/script/evaluate)
    complexity-limit = ${waves.rest-api.evaluate-script-complexity-limit}

    # Maximum size of transaction validation error log
    # https://github.com/lightbend/config/blob/master/HOCON.md#size-in-bytes-format
    max-tx-error-log-size = 100 KiB

    # Requests and responses cache parameters.
    response-cache {
      # Size of cache.
      # https://github.com/lightbend/config/blob/master/HOCON.md#size-in-bytes-format
      size = 300 MiB

      # How long a not requested cached value is in the cache.
      # Too small value may cause an increased response time: we have to recalculate a response.
      # Too big value may cause slow updates because of increased number of pending for calculation requests in a queue.
      ttl = 180 s

      # Removed from the cache requests increases a garbage in a blockchain data cache.
      # Too often garbage cleanup could affect a response time.
      # So we do it only when a threshold (number of removed requests) is reached.
      gc-threshold = 30
    }

    # Contains a blockchain data, e.g.: balances, account data, scripts, etc.
    blockchain-data-cache {
      # https://github.com/lightbend/config/blob/master/HOCON.md#size-in-bytes-format
      size = 800 MiB
    }

    # Max number of ride runner pool threads.
    # When not configured explicitly, min(4, Runtime.getRuntime.availableProcessors() * 2) threads are used.
    // parallel-ride-run-threads = 4

    # Back pressured buffer for Blockchain events. Helps to align speed of receiving and processing events.
    # Must be > 1
    blockchain-blocks-buffer-size = 2

    # The gRPC API could be limited by nGINX rules:
    # http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn
    # If you have such limits, provide here the value of limit_conn - 1 (reserve one connection for blockchain updates).
    # No limits are applied by default.
    // grpc-api-max-concurrent-requests = 5

    # Settings for gRPC which is used by the client to interact with Waves Node gRPC extension.
    grpc-api-channel = ${waves.ride-runner.common-grpc-channel-settings}

    # Settings for gRPC which is used by the client to interact with Waves Node Blockchain updates extension.
    blockchain-updates-api-channel = ${waves.ride-runner.common-grpc-channel-settings}

    common-grpc-channel-settings {
      # Sets max number of hedged attempts.
      # Hedging means sending multiple copies of a single request without waiting for a response.
      max-hedged-attempts = 2

      # Sets max number of retry attempts.
      max-retry-attempts = 10

      # Sets whether keepalive will be performed when there are no outstanding RPC on a connection.
      keep-alive-without-calls = false

      # Sets the time without read activity before sending a keepalive ping.
      # Can't be less than 10s, see io.grpc.internal.KeepAliveManager.
      # 30 s to work with public Waves APIs
      keep-alive-time = 30 s

      # Sets the time waiting for read activity after sending a keepalive ping.
      keep-alive-timeout = 15 s

      # Set the duration without ongoing RPCs before going to idle mode.
      # See https://github.com/grpc/grpc/blob/master/doc/connectivity-semantics-and-api.md
      idle-timeout = 300 d

      # Low level settings for connection.
      channel-options {
        # A timeout to setup a connection.
        connect-timeout = 5 s
      }

      # Limit the maximum size of incoming messages. 8 MiB is enough for a worst case in MainNet.
      max-inbound-message-size = 8 MiB
    }
  }
}

akka {
  http.server.max-connections = 100
  actor.default-dispatcher.fork-join-executor = {
    parallelism-min = 8
    parallelism-max = 8
  }
}

# Performance metrics
kamon {
  # Set to "yes", if you want to report metrics
  enabled = no

  modules {
    influxdb.enabled = false
    prometheus-reporter.enabled = false
  }
}
