include required("waves-public-api.conf")

# RIDE runner related settings
waves.ride-runner {
  # RIDE runner base directory
  directory = ""

  db {
    directory = ${waves.ride-runner.directory}"/data"
  }

  # Enable if you need traces for RIDE scripts, but usually they are big and consume much memory.
  enable-traces = no

  # The limit of complexity of a function that is not Callable (/utils/script/evaluate)
  complexity-limit = ${waves.rest-api.evaluate-script-complexity-limit}

  # Consider the service as unhealthy if it don't update events in more than this duration.
  # Should be more than no-data-timeout
  unhealthy-idle-timeout = 2m

  # Max number of ride runner pool threads.
  # When not configured explicitly, min(4, Runtime.getRuntime.availableProcessors() * 2) threads are used.
  ride-scheduler-threads = 4

  # The gRPC API could be limited by nGINX rules:
  # http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn
  # If you have such limits, provide here the value of limit_conn - 1 (reserve one connection for blockchain updates).
  # No limits are applied by default.
  # max-concurrent-grpc-requests = 5

  # For RideRunnerWithPreparedStateApp
  immutable-blockchain = ${waves.blockchain}

  # For RideRunnerWithBlockchainUpdatesApp/Service
  shared-blockchain {
    blockchain = ${waves.blockchain}
    common-cache {
      # https://github.com/lightbend/config/blob/master/HOCON.md#size-in-bytes-format
      size = 350m
    }
  }

  ### Internal settings. Change on your own risk
  db.version = 10 # Increase when need to delete the database

  blockchain-state {
    delay-before-force-restart = 1s
  }

  grpc-connector {
    # By default: min((numOfProcessors * 2), 4)
    executor-threads = 4
  }

  blockchain-api {
    # The only way to get VRF now
    node-api-base-uri = ${waves.public-api.rest-api}

    # gRPC API client related settings
    grpc-api {
      max-concurrent-requests = ${?waves.ride-runner.max-concurrent-grpc-requests}
    }

    # Blockchain Updates client related settings
    blockchain-updates-api {
      # The stream is considered as stucked if we haven't received an event during this time
      no-data-timeout = 90s

      # Back pressured buffer for Blockchain events. Helps to align speed of receiving and processing events
      # Must be > 1
      buffer-size = 2
    }
  }

  requests-service {
    enable-traces = ${waves.ride-runner.enable-traces}
    evaluate-script-complexity-limit = ${waves.ride-runner.complexity-limit}
    # See ${waves.max-tx-error-log-size}
    max-tx-error-log-size = 1024 # 1 KiB
    parallelization = ${?waves.ride-runner.ride-scheduler-threads}
    cache-ttl = 300s

    # Clean not used tags after reaching this size
    ignored-cleanup-threshold = 50
  }

  grpc-api-channel = ${waves.ride-runner.common-grpc-channel-settings}
  grpc-api-channel {
    # Address and port of gRPC server.
    # In order to provide fault-tolerance, consider using DNS server between DEX and Node, which would resolve this
    # address into several endpoints (ips of nodes with DEXExtension installed).
    # Use "dns:///" prefix to specify a domain name
    target = ${waves.public-api.grpc-api}
  }

  # Settings for gRPC which is used by the client to interact with Blockchain updates extension.
  # Client for com.wavesplatform.events.BlockchainUpdates
  blockchain-updates-api-channel = ${waves.ride-runner.common-grpc-channel-settings}
  blockchain-updates-api-channel {
    # Address and port of gRPC server.
    # In order to provide fault-tolerance, consider using DNS server between DEX and Node, which would resolve this
    # address into several endpoints (ips of nodes with DEXExtension installed).
    # Use "dns:///" prefix to specify a domain name
    target = ${waves.public-api.grpc-blockchain-updates-api}
  }

  common-grpc-channel-settings {
    # Address and port of gRPC server.
    # In order to provide fault-tolerance, consider using DNS server between this service and Node, which would resolve this
    # address into several endpoints (ips of nodes with DEXExtension installed).
    # Use "dns:///" prefix to specify a domain name
    target = ""

    # Internal gRPC channel settings

    # Sets max number of hedged attempts.
    # Hedging means sending multiple copies of a single request without waiting for a response.
    max-hedged-attempts = 2

    # Sets max number of retry attempts
    max-retry-attempts = 10

    # Sets whether keepalive will be performed when there are no outstanding RPC on a connection
    keep-alive-without-calls = false

    # Sets the time without read activity before sending a keepalive ping.
    # Can't be less than 10s, see io.grpc.internal.KeepAliveManager
    # 30s to work with public Waves APIs
    keep-alive-time = 30s

    # Sets the time waiting for read activity after sending a keepalive ping.
    keep-alive-timeout = 10s

    # Set the duration without ongoing RPCs before going to idle mode.
    # See https://github.com/grpc/grpc/blob/master/doc/connectivity-semantics-and-api.md
    idle-timeout = 300d

    # Low level settings for connection
    channel-options {
      # A timeout to setup a connection
      connect-timeout = 5s
    }

    max-inbound-message-size = 8388608 # 8 MiB
  }
}
