package com.wavesplatform.http

import akka.http.scaladsl.testkit.RouteTestTimeout
import com.google.protobuf.ByteString
import com.wavesplatform.api.http.ApiError.TooBigArrayAllocation
import com.wavesplatform.api.http.UtilsApiRoute
import com.wavesplatform.api.http.requests.ScriptWithImportsRequest
import com.wavesplatform.common.utils.{Base58, EitherExt2}
import com.wavesplatform.crypto
import com.wavesplatform.http.ApiMarshallers._
import com.wavesplatform.lang.contract.DApp
import com.wavesplatform.lang.contract.DApp.{CallableAnnotation, CallableFunction, VerifierAnnotation, VerifierFunction}
import com.wavesplatform.lang.directives.values.{V2, V3}
import com.wavesplatform.lang.script.v1.ExprScript
import com.wavesplatform.lang.script.{ContractScript, Script}
import com.wavesplatform.lang.v1.compiler.Terms._
import com.wavesplatform.lang.v1.evaluator.ctx.impl.PureContext
import com.wavesplatform.lang.v1.estimator.v2.ScriptEstimatorV2
import com.wavesplatform.protobuf.dapp.DAppMeta
import com.wavesplatform.protobuf.dapp.DAppMeta.CallableFuncSignature
import com.wavesplatform.state.diffs.FeeValidation
import com.wavesplatform.transaction.smart.script.ScriptCompiler
import com.wavesplatform.utils.{Schedulers, Time}
import io.netty.util.HashedWheelTimer
import org.scalacheck.Gen
import org.scalatestplus.scalacheck.{ScalaCheckPropertyChecks => PropertyChecks}
import play.api.libs.json.{JsObject, JsValue}

import scala.concurrent.duration._

class UtilsRouteSpec extends RouteSpec("/utils") with RestAPISettingsHelper with PropertyChecks {
  implicit val routeTestTimeout = RouteTestTimeout(10.seconds)
  implicit val timeout          = routeTestTimeout.duration

  private val estimator = ScriptEstimatorV2
  private val route = UtilsApiRoute(
    new Time {
      def correctedTime(): Long = System.currentTimeMillis()
      def getTimestamp(): Long  = System.currentTimeMillis()
    },
    restAPISettings,
    estimator,
    Schedulers.timeBoundedFixedPool(
      new HashedWheelTimer(),
      5.seconds,
      1,
      "rest-time-limited"
    )
  ).route

  val script = FUNCTION_CALL(
    function = PureContext.eq.header,
    args = List(CONST_LONG(1), CONST_LONG(2))
  )

  val dappVer = DApp(
    meta = DAppMeta(),
    decs = List.empty,
    callableFuncs = List.empty,
    verifierFuncOpt = Some(
      VerifierFunction(VerifierAnnotation("tx"), FUNC("verify", List(), TRUE))
    )
  )

  val badScript =
    """
      |{-# STDLIB_VERSION 3 #-}
      |{-# CONTENT_TYPE EXPRESSION #-}
      |{-# SCRIPT_TYPE ACCOUNT #-}
      |func f0() = true
      |func f1() = if (true) then f0() else f0()
      |func f2() = if (true) then f1() else f1()
      |func f3() = if (true) then f2() else f2()
      |func f4() = if (true) then f3() else f3()
      |func f5() = if (true) then f4() else f4()
      |func f6() = if (true) then f5() else f5()
      |func f7() = if (true) then f6() else f6()
      |func f8() = if (true) then f7() else f7()
      |func f9() = if (true) then f8() else f8()
      |func f10() = if (true) then f9() else f9()
      |func f11() = if (true) then f10() else f10()
      |func f12() = if (true) then f11() else f11()
      |func f13() = if (true) then f12() else f12()
      |func f14() = if (true) then f13() else f13()
      |func f15() = if (true) then f14() else f14()
      |func f16() = if (true) then f15() else f15()
      |func f17() = if (true) then f16() else f16()
      |func f18() = if (true) then f17() else f17()
      |func f19() = if (true) then f18() else f18()
      |func f20() = if (true) then f19() else f19()
      |func f21() = if (true) then f20() else f20()
      |func f22() = if (true) then f21() else f21()
      |func f23() = if (true) then f22() else f22()
      |func f24() = if (true) then f23() else f23()
      |func f25() = if (true) then f24() else f24()
      |func f26() = if (true) then f25() else f25()
      |func f27() = if (true) then f26() else f26()
      |func f28() = if (true) then f27() else f27()
      |func f29() = if (true) then f28() else f28()
      |func f30() = if (true) then f29() else f29()
      |func f31() = if (true) then f30() else f30()
      |func f32() = if (true) then f31() else f31()
      |func f33() = if (true) then f32() else f32()
      |func f34() = if (true) then f33() else f33()
      |func f35() = if (true) then f34() else f34()
      |func f36() = if (true) then f35() else f35()
      |func f37() = if (true) then f36() else f36()
      |func f38() = if (true) then f37() else f37()
      |func f39() = if (true) then f38() else f38()
      |func f40() = if (true) then f39() else f39()
      |func f41() = if (true) then f40() else f40()
      |func f42() = if (true) then f41() else f41()
      |func f43() = if (true) then f42() else f42()
      |func f44() = if (true) then f43() else f43()
      |func f45() = if (true) then f44() else f44()
      |func f46() = if (true) then f45() else f45()
      |func f47() = if (true) then f46() else f46()
      |func f48() = if (true) then f47() else f47()
      |func f49() = if (true) then f48() else f48()
      |func f50() = if (true) then f49() else f49()
      |func f51() = if (true) then f50() else f50()
      |func f52() = if (true) then f51() else f51()
      |func f53() = if (true) then f52() else f52()
      |func f54() = if (true) then f53() else f53()
      |func f55() = if (true) then f54() else f54()
      |func f56() = if (true) then f55() else f55()
      |func f57() = if (true) then f56() else f56()
      |func f58() = if (true) then f57() else f57()
      |func f59() = if (true) then f58() else f58()
      |func f60() = if (true) then f59() else f59()
      |func f61() = if (true) then f60() else f60()
      |func f62() = if (true) then f61() else f61()
      |func f63() = if (true) then f62() else f62()
      |func f64() = if (true) then f63() else f63()
      |func f65() = if (true) then f64() else f64()
      |func f66() = if (true) then f65() else f65()
      |func f67() = if (true) then f66() else f66()
      |func f68() = if (true) then f67() else f67()
      |func f69() = if (true) then f68() else f68()
      |func f70() = if (true) then f69() else f69()
      |func f71() = if (true) then f70() else f70()
      |func f72() = if (true) then f71() else f71()
      |func f73() = if (true) then f72() else f72()
      |func f74() = if (true) then f73() else f73()
      |func f75() = if (true) then f74() else f74()
      |func f76() = if (true) then f75() else f75()
      |func f77() = if (true) then f76() else f76()
      |func f78() = if (true) then f77() else f77()
      |func f79() = if (true) then f78() else f78()
      |func f80() = if (true) then f79() else f79()
      |func f81() = if (true) then f80() else f80()
      |func f82() = if (true) then f81() else f81()
      |func f83() = if (true) then f82() else f82()
      |func f84() = if (true) then f83() else f83()
      |func f85() = if (true) then f84() else f84()
      |func f86() = if (true) then f85() else f85()
      |func f87() = if (true) then f86() else f86()
      |func f88() = if (true) then f87() else f87()
      |func f89() = if (true) then f88() else f88()
      |func f90() = if (true) then f89() else f89()
      |func f91() = if (true) then f90() else f90()
      |func f92() = if (true) then f91() else f91()
      |func f93() = if (true) then f92() else f92()
      |func f94() = if (true) then f93() else f93()
      |func f95() = if (true) then f94() else f94()
      |func f96() = if (true) then f95() else f95()
      |func f97() = if (true) then f96() else f96()
      |func f98() = if (true) then f97() else f97()
      |func f99() = if (true) then f98() else f98()
      |func f100() = if (true) then f99() else f99()
      |f100()
      |""".stripMargin

  val badScriptBase64 =
    "AwoBAAAAAmYwAAAAAAYKAQAAAAJmMQAAAAADBgkBAAAAAmYwAAAAAAkBAAAAAmYwAAAAAAoBAAAAAmYyAAAAAAMGCQEAAAACZjEAAAAACQEAAAACZjEAAAAACgEAAAACZjMAAAAAAwYJAQAAAAJmMgAAAAAJAQAAAAJmMgAAAAAKAQAAAAJmNAAAAAADBgkBAAAAAmYzAAAAAAkBAAAAAmYzAAAAAAoBAAAAAmY1AAAAAAMGCQEAAAACZjQAAAAACQEAAAACZjQAAAAACgEAAAACZjYAAAAAAwYJAQAAAAJmNQAAAAAJAQAAAAJmNQAAAAAKAQAAAAJmNwAAAAADBgkBAAAAAmY2AAAAAAkBAAAAAmY2AAAAAAoBAAAAAmY4AAAAAAMGCQEAAAACZjcAAAAACQEAAAACZjcAAAAACgEAAAACZjkAAAAAAwYJAQAAAAJmOAAAAAAJAQAAAAJmOAAAAAAKAQAAAANmMTAAAAAAAwYJAQAAAAJmOQAAAAAJAQAAAAJmOQAAAAAKAQAAAANmMTEAAAAAAwYJAQAAAANmMTAAAAAACQEAAAADZjEwAAAAAAoBAAAAA2YxMgAAAAADBgkBAAAAA2YxMQAAAAAJAQAAAANmMTEAAAAACgEAAAADZjEzAAAAAAMGCQEAAAADZjEyAAAAAAkBAAAAA2YxMgAAAAAKAQAAAANmMTQAAAAAAwYJAQAAAANmMTMAAAAACQEAAAADZjEzAAAAAAoBAAAAA2YxNQAAAAADBgkBAAAAA2YxNAAAAAAJAQAAAANmMTQAAAAACgEAAAADZjE2AAAAAAMGCQEAAAADZjE1AAAAAAkBAAAAA2YxNQAAAAAKAQAAAANmMTcAAAAAAwYJAQAAAANmMTYAAAAACQEAAAADZjE2AAAAAAoBAAAAA2YxOAAAAAADBgkBAAAAA2YxNwAAAAAJAQAAAANmMTcAAAAACgEAAAADZjE5AAAAAAMGCQEAAAADZjE4AAAAAAkBAAAAA2YxOAAAAAAKAQAAAANmMjAAAAAAAwYJAQAAAANmMTkAAAAACQEAAAADZjE5AAAAAAoBAAAAA2YyMQAAAAADBgkBAAAAA2YyMAAAAAAJAQAAAANmMjAAAAAACgEAAAADZjIyAAAAAAMGCQEAAAADZjIxAAAAAAkBAAAAA2YyMQAAAAAKAQAAAANmMjMAAAAAAwYJAQAAAANmMjIAAAAACQEAAAADZjIyAAAAAAoBAAAAA2YyNAAAAAADBgkBAAAAA2YyMwAAAAAJAQAAAANmMjMAAAAACgEAAAADZjI1AAAAAAMGCQEAAAADZjI0AAAAAAkBAAAAA2YyNAAAAAAKAQAAAANmMjYAAAAAAwYJAQAAAANmMjUAAAAACQEAAAADZjI1AAAAAAoBAAAAA2YyNwAAAAADBgkBAAAAA2YyNgAAAAAJAQAAAANmMjYAAAAACgEAAAADZjI4AAAAAAMGCQEAAAADZjI3AAAAAAkBAAAAA2YyNwAAAAAKAQAAAANmMjkAAAAAAwYJAQAAAANmMjgAAAAACQEAAAADZjI4AAAAAAoBAAAAA2YzMAAAAAADBgkBAAAAA2YyOQAAAAAJAQAAAANmMjkAAAAACgEAAAADZjMxAAAAAAMGCQEAAAADZjMwAAAAAAkBAAAAA2YzMAAAAAAKAQAAAANmMzIAAAAAAwYJAQAAAANmMzEAAAAACQEAAAADZjMxAAAAAAoBAAAAA2YzMwAAAAADBgkBAAAAA2YzMgAAAAAJAQAAAANmMzIAAAAACgEAAAADZjM0AAAAAAMGCQEAAAADZjMzAAAAAAkBAAAAA2YzMwAAAAAKAQAAAANmMzUAAAAAAwYJAQAAAANmMzQAAAAACQEAAAADZjM0AAAAAAoBAAAAA2YzNgAAAAADBgkBAAAAA2YzNQAAAAAJAQAAAANmMzUAAAAACgEAAAADZjM3AAAAAAMGCQEAAAADZjM2AAAAAAkBAAAAA2YzNgAAAAAKAQAAAANmMzgAAAAAAwYJAQAAAANmMzcAAAAACQEAAAADZjM3AAAAAAoBAAAAA2YzOQAAAAADBgkBAAAAA2YzOAAAAAAJAQAAAANmMzgAAAAACgEAAAADZjQwAAAAAAMGCQEAAAADZjM5AAAAAAkBAAAAA2YzOQAAAAAKAQAAAANmNDEAAAAAAwYJAQAAAANmNDAAAAAACQEAAAADZjQwAAAAAAoBAAAAA2Y0MgAAAAADBgkBAAAAA2Y0MQAAAAAJAQAAAANmNDEAAAAACgEAAAADZjQzAAAAAAMGCQEAAAADZjQyAAAAAAkBAAAAA2Y0MgAAAAAKAQAAAANmNDQAAAAAAwYJAQAAAANmNDMAAAAACQEAAAADZjQzAAAAAAoBAAAAA2Y0NQAAAAADBgkBAAAAA2Y0NAAAAAAJAQAAAANmNDQAAAAACgEAAAADZjQ2AAAAAAMGCQEAAAADZjQ1AAAAAAkBAAAAA2Y0NQAAAAAKAQAAAANmNDcAAAAAAwYJAQAAAANmNDYAAAAACQEAAAADZjQ2AAAAAAoBAAAAA2Y0OAAAAAADBgkBAAAAA2Y0NwAAAAAJAQAAAANmNDcAAAAACgEAAAADZjQ5AAAAAAMGCQEAAAADZjQ4AAAAAAkBAAAAA2Y0OAAAAAAKAQAAAANmNTAAAAAAAwYJAQAAAANmNDkAAAAACQEAAAADZjQ5AAAAAAoBAAAAA2Y1MQAAAAADBgkBAAAAA2Y1MAAAAAAJAQAAAANmNTAAAAAACgEAAAADZjUyAAAAAAMGCQEAAAADZjUxAAAAAAkBAAAAA2Y1MQAAAAAKAQAAAANmNTMAAAAAAwYJAQAAAANmNTIAAAAACQEAAAADZjUyAAAAAAoBAAAAA2Y1NAAAAAADBgkBAAAAA2Y1MwAAAAAJAQAAAANmNTMAAAAACgEAAAADZjU1AAAAAAMGCQEAAAADZjU0AAAAAAkBAAAAA2Y1NAAAAAAKAQAAAANmNTYAAAAAAwYJAQAAAANmNTUAAAAACQEAAAADZjU1AAAAAAoBAAAAA2Y1NwAAAAADBgkBAAAAA2Y1NgAAAAAJAQAAAANmNTYAAAAACgEAAAADZjU4AAAAAAMGCQEAAAADZjU3AAAAAAkBAAAAA2Y1NwAAAAAKAQAAAANmNTkAAAAAAwYJAQAAAANmNTgAAAAACQEAAAADZjU4AAAAAAoBAAAAA2Y2MAAAAAADBgkBAAAAA2Y1OQAAAAAJAQAAAANmNTkAAAAACgEAAAADZjYxAAAAAAMGCQEAAAADZjYwAAAAAAkBAAAAA2Y2MAAAAAAKAQAAAANmNjIAAAAAAwYJAQAAAANmNjEAAAAACQEAAAADZjYxAAAAAAoBAAAAA2Y2MwAAAAADBgkBAAAAA2Y2MgAAAAAJAQAAAANmNjIAAAAACgEAAAADZjY0AAAAAAMGCQEAAAADZjYzAAAAAAkBAAAAA2Y2MwAAAAAKAQAAAANmNjUAAAAAAwYJAQAAAANmNjQAAAAACQEAAAADZjY0AAAAAAoBAAAAA2Y2NgAAAAADBgkBAAAAA2Y2NQAAAAAJAQAAAANmNjUAAAAACgEAAAADZjY3AAAAAAMGCQEAAAADZjY2AAAAAAkBAAAAA2Y2NgAAAAAKAQAAAANmNjgAAAAAAwYJAQAAAANmNjcAAAAACQEAAAADZjY3AAAAAAoBAAAAA2Y2OQAAAAADBgkBAAAAA2Y2OAAAAAAJAQAAAANmNjgAAAAACgEAAAADZjcwAAAAAAMGCQEAAAADZjY5AAAAAAkBAAAAA2Y2OQAAAAAKAQAAAANmNzEAAAAAAwYJAQAAAANmNzAAAAAACQEAAAADZjcwAAAAAAoBAAAAA2Y3MgAAAAADBgkBAAAAA2Y3MQAAAAAJAQAAAANmNzEAAAAACgEAAAADZjczAAAAAAMGCQEAAAADZjcyAAAAAAkBAAAAA2Y3MgAAAAAKAQAAAANmNzQAAAAAAwYJAQAAAANmNzMAAAAACQEAAAADZjczAAAAAAoBAAAAA2Y3NQAAAAADBgkBAAAAA2Y3NAAAAAAJAQAAAANmNzQAAAAACgEAAAADZjc2AAAAAAMGCQEAAAADZjc1AAAAAAkBAAAAA2Y3NQAAAAAKAQAAAANmNzcAAAAAAwYJAQAAAANmNzYAAAAACQEAAAADZjc2AAAAAAoBAAAAA2Y3OAAAAAADBgkBAAAAA2Y3NwAAAAAJAQAAAANmNzcAAAAACgEAAAADZjc5AAAAAAMGCQEAAAADZjc4AAAAAAkBAAAAA2Y3OAAAAAAKAQAAAANmODAAAAAAAwYJAQAAAANmNzkAAAAACQEAAAADZjc5AAAAAAoBAAAAA2Y4MQAAAAADBgkBAAAAA2Y4MAAAAAAJAQAAAANmODAAAAAACgEAAAADZjgyAAAAAAMGCQEAAAADZjgxAAAAAAkBAAAAA2Y4MQAAAAAKAQAAAANmODMAAAAAAwYJAQAAAANmODIAAAAACQEAAAADZjgyAAAAAAoBAAAAA2Y4NAAAAAADBgkBAAAAA2Y4MwAAAAAJAQAAAANmODMAAAAACgEAAAADZjg1AAAAAAMGCQEAAAADZjg0AAAAAAkBAAAAA2Y4NAAAAAAKAQAAAANmODYAAAAAAwYJAQAAAANmODUAAAAACQEAAAADZjg1AAAAAAoBAAAAA2Y4NwAAAAADBgkBAAAAA2Y4NgAAAAAJAQAAAANmODYAAAAACgEAAAADZjg4AAAAAAMGCQEAAAADZjg3AAAAAAkBAAAAA2Y4NwAAAAAKAQAAAANmODkAAAAAAwYJAQAAAANmODgAAAAACQEAAAADZjg4AAAAAAoBAAAAA2Y5MAAAAAADBgkBAAAAA2Y4OQAAAAAJAQAAAANmODkAAAAACgEAAAADZjkxAAAAAAMGCQEAAAADZjkwAAAAAAkBAAAAA2Y5MAAAAAAKAQAAAANmOTIAAAAAAwYJAQAAAANmOTEAAAAACQEAAAADZjkxAAAAAAoBAAAAA2Y5MwAAAAADBgkBAAAAA2Y5MgAAAAAJAQAAAANmOTIAAAAACgEAAAADZjk0AAAAAAMGCQEAAAADZjkzAAAAAAkBAAAAA2Y5MwAAAAAKAQAAAANmOTUAAAAAAwYJAQAAAANmOTQAAAAACQEAAAADZjk0AAAAAAoBAAAAA2Y5NgAAAAADBgkBAAAAA2Y5NQAAAAAJAQAAAANmOTUAAAAACgEAAAADZjk3AAAAAAMGCQEAAAADZjk2AAAAAAkBAAAAA2Y5NgAAAAAKAQAAAANmOTgAAAAAAwYJAQAAAANmOTcAAAAACQEAAAADZjk3AAAAAAoBAAAAA2Y5OQAAAAADBgkBAAAAA2Y5OAAAAAAJAQAAAANmOTgAAAAACgEAAAAEZjEwMAAAAAADBgkBAAAAA2Y5OQAAAAAJAQAAAANmOTkAAAAACQEAAAAEZjEwMAAAAAD7+x+p"

  routePath("/script/decompile") in {
    val base64 = ExprScript(script).explicitGet().bytes().base64
    Post(routePath("/script/decompile"), base64) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "STDLIB_VERSION").as[Int] shouldBe 1
      (json \ "CONTENT_TYPE").as[String] shouldBe "EXPRESSION"
      (json \ "script").as[String] shouldBe "" +
        "{-# STDLIB_VERSION 1 #-}\n" +
        "{-# CONTENT_TYPE EXPRESSION #-}\n" +
        "(1 == 2)"
    }

    //V1 Expression
    Post(routePath("/script/decompile"), "AQa3b8tH") ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "STDLIB_VERSION").as[Int] shouldBe 1
      (json \ "CONTENT_TYPE").as[String] shouldBe "EXPRESSION"
      (json \ "script").as[String] shouldBe "" +
        "{-# STDLIB_VERSION 1 #-}\n" +
        "{-# CONTENT_TYPE EXPRESSION #-}\n" +
        "true"
    }

    //V2 Expression
    Post(routePath("/script/decompile"), "AgZ7TN8j") ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "STDLIB_VERSION").as[Int] shouldBe 2
      (json \ "CONTENT_TYPE").as[String] shouldBe "EXPRESSION"
      (json \ "script").as[String] shouldBe "" +
        "{-# STDLIB_VERSION 2 #-}\n" +
        "{-# CONTENT_TYPE EXPRESSION #-}\n" +
        "true"
    }

    //V3 Expression
    Post(routePath("/script/decompile"), "AwZd0cYf") ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "STDLIB_VERSION").as[Int] shouldBe 3
      (json \ "CONTENT_TYPE").as[String] shouldBe "EXPRESSION"
      (json \ "script").as[String] shouldBe "" +
        "{-# STDLIB_VERSION 3 #-}\n" +
        "{-# CONTENT_TYPE EXPRESSION #-}\n" +
        "true"
    }

    val compiled = "AAIDAAAAAAAAAAIIAQAAAAEAAAAAAWEJAQAAABFAZXh0ck5hdGl2ZSgxMDQwKQAAAAIFAAAAA25pbAIAAAAAAAAAAAAAAACl8TPJ"
    Post(routePath("/script/decompile"), compiled) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "script").as[String].trim shouldBe
        """
          |{-# STDLIB_VERSION 3 #-}
          |{-# SCRIPT_TYPE ACCOUNT #-}
          |{-# CONTENT_TYPE DAPP #-}
          |let a = getIntegerValue(nil, "")
        """.stripMargin.trim
    }

    val dappVerBytesStr = ContractScript(V3, dappVer).explicitGet().bytes().base64

    testdAppDirective(dappVerBytesStr)
    testdAppDirective("\t\t \n\n" + dappVerBytesStr + " \t \n \t")
  }

  routePath("/script/meta") in {
    //Expression
    val exprBase64 = ExprScript(script).explicitGet().bytes().base64
    Post(routePath("/script/meta"), exprBase64) ~> route ~> check {
      val json = responseAs[JsValue]
      json.toString shouldBe "{}"
    }

    //DApp
    val dApp = DApp(
      DAppMeta(
        version = 1,
        List(
          CallableFuncSignature(ByteString.copyFrom(Array[Byte](1, 2, 4, 8))),
          CallableFuncSignature(ByteString.copyFrom(Array[Byte](8, 4, 2, 1))),
          CallableFuncSignature(ByteString.EMPTY)
        )
      ),
      List(
        LET("letName", CONST_BOOLEAN(true)),
        FUNC("funcName", List("arg1", "arg2"), CONST_BOOLEAN(false))
      ),
      List(
        CallableFunction(
          CallableAnnotation("func1"),
          FUNC("anotherFunc", List("a", "b", "c", "d"), CONST_BOOLEAN(true))
        ),
        CallableFunction(
          CallableAnnotation("func2"),
          FUNC("default", List("x", "y", "z", "w"), CONST_BOOLEAN(false))
        ),
        CallableFunction(
          CallableAnnotation("func3"),
          FUNC("default", List(), CONST_BOOLEAN(false))
        )
      ),
      Some(
        VerifierFunction(
          VerifierAnnotation("hmmm"),
          FUNC("funcAgain", List("arg"), CONST_BOOLEAN(false))
        )
      )
    )
    val dappBase64 = ContractScript(V3, dApp).explicitGet().bytes().base64
    Post(routePath("/script/meta"), dappBase64) ~> route ~> check {
      val json = responseAs[JsValue]
      json.toString shouldBe
        """{"version":"1","callableFuncTypes":[
          |{"a":"Int","b":"ByteVector","c":"Boolean","d":"String"},
          |{"x":"String","y":"Boolean","z":"ByteVector","w":"Int"},
          |{}
          |]}
          |""".stripMargin
          .replace("\n", "")
    }

    //preserves earlier compiled dApp params order
    val dAppBase64 =
      "base64:"
    Post(routePath("/script/meta"), dAppBase64) ~> route ~> check {
      val json = responseAs[JsValue]
      json.toString shouldBe
        """
          |{
          |  "version": "1",
          |  "callableFuncTypes": [
          |    {
          |      "owner": "String",
          |      "token": "String",
          |      "oracle": "String",
          |      "maxRate": "Int",
          |      "discount": "Int",
          |      "grace": "Int",
          |      "interest": "Int",
          |      "burndown": "Int",
          |      "serviceFee": "Int",
          |      "lendSize": "Int"
          |    },
          |    {
          |      "oracle": "String",
          |      "maxRate": "Int",
          |      "discount": "Int",
          |      "grace": "Int",
          |      "interest": "Int",
          |      "burndown": "Int",
          |      "serviceFee": "Int",
          |      "lendSize": "Int"
          |    },
          |    {},
          |    {},
          |    {
          |      "address": "String"
          |    },
          |    {},
          |    {
          |      "lender": "String"
          |    },
          |    {},
          |    {
          |      "b": "Boolean"
          |    },
          |    {},
          |    {},
          |    {
          |      "b": "Boolean"
          |    },
          |    {
          |      "b": "Boolean"
          |    }
          |  ]
          |}
          |""".stripMargin.replaceAll("\\s", "")

    }
  }

  private def testdAppDirective(str: String) =
    Post(routePath("/script/decompile"), str) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "STDLIB_VERSION").as[Int] shouldBe 3
      (json \ "CONTENT_TYPE").as[String] shouldBe "DAPP"
      (json \ "SCRIPT_TYPE").as[String] shouldBe "ACCOUNT"

      val expectedResult =
        "{-# STDLIB_VERSION 3 #-}\n{-# SCRIPT_TYPE ACCOUNT #-}\n{-# CONTENT_TYPE DAPP #-}\n\n\n\n@Verifier(tx)\nfunc verify () = true\n"
      (json \ "script").as[String] shouldBe expectedResult
    }

  routePath("/script/compile") in {
    Post(routePath("/script/compile"), "(1 == 2)") ~> route ~> check {
      val json           = responseAs[JsValue]
      val expectedScript = ExprScript(V2, script).explicitGet()

      Script.fromBase64String((json \ "script").as[String]) shouldBe Right(expectedScript)
      (json \ "complexity").as[Long] shouldBe 3
      (json \ "extraFee").as[Long] shouldBe FeeValidation.ScriptExtraFee
    }

    Post(routePath("/script/compile"), badScript) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "error").as[Int] shouldBe 305
      (json \ "message").as[String] shouldBe "Script estimation was interrupted"
    }
  }

  routePath("/script/compileCode") in {
    Post(routePath("/script/compileCode"), "(1 == 2)") ~> route ~> check {
      val json           = responseAs[JsValue]
      val expectedScript = ExprScript(V2, script).explicitGet()

      Script.fromBase64String((json \ "script").as[String]) shouldBe Right(expectedScript)
      (json \ "complexity").as[Long] shouldBe 3
      (json \ "extraFee").as[Long] shouldBe FeeValidation.ScriptExtraFee
    }

    Post(routePath("/script/compileCode"), badScript) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "error").as[Int] shouldBe 305
      (json \ "message").as[String] shouldBe "Script estimation was interrupted"
    }
  }

  routePath("/script/compileWithImports") in {
    Post(routePath("/script/compileWithImports"), ScriptWithImportsRequest("(1 == 2)")) ~> route ~> check {
      val json           = responseAs[JsValue]
      val expectedScript = ExprScript(V2, script).explicitGet()

      Script.fromBase64String((json \ "script").as[String]) shouldBe Right(expectedScript)
      (json \ "complexity").as[Long] shouldBe 3
      (json \ "extraFee").as[Long] shouldBe FeeValidation.ScriptExtraFee
    }

    val request = ScriptWithImportsRequest(
      """
        | {-# SCRIPT_TYPE ACCOUNT #-}
        | {-# IMPORT dir/my/lib.ride #-}
        | let a = 5
        | inc(a) == a + 1
      """.stripMargin,
      Map(
        "dir/my/lib.ride" ->
          """
            | {-# CONTENT_TYPE LIBRARY #-}
            | func inc(a: Int) = a + 1
          """.stripMargin
      )
    )
    Post(routePath("/script/compileWithImports"), request) ~> route ~> check {
      val expectedScript =
        """
          | {-# SCRIPT_TYPE ACCOUNT #-}
          | func inc(a: Int) = a + 1
          | let a = 5
          | inc(a) == a + 1
        """.stripMargin
      val compiled = ScriptCompiler.compile(expectedScript, ScriptEstimatorV2)

      val json         = responseAs[JsValue]
      val base64Result = Script.fromBase64String((json \ "script").as[String])
      base64Result shouldBe compiled.map(_._1)
      (json \ "complexity").as[Long] shouldBe compiled.map(_._2).explicitGet()
      (json \ "extraFee").as[Long] shouldBe FeeValidation.ScriptExtraFee
    }

    Post(routePath("/script/compileWithImports"), ScriptWithImportsRequest(badScript)) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "error").as[Int] shouldBe 305
      (json \ "message").as[String] shouldBe "Script estimation was interrupted"
    }
  }

  routePath("/script/estimate") in {
    val base64 = ExprScript(script).explicitGet().bytes().base64

    Post(routePath("/script/estimate"), base64) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "script").as[String] shouldBe base64
      (json \ "scriptText").as[String] shouldBe "FUNCTION_CALL(Native(0),List(1, 2))" // [WAIT] s"(1 == 2)"
      (json \ "complexity").as[Long] shouldBe 3
      (json \ "extraFee").as[Long] shouldBe FeeValidation.ScriptExtraFee
    }

    Post(routePath("/script/estimate"), badScriptBase64) ~> route ~> check {
      val json = responseAs[JsValue]
      (json \ "error").as[Int] shouldBe 305
      (json \ "message").as[String] shouldBe "Script estimation was interrupted"
    }
  }

  routePath("/seed") in {
    Get(routePath("/seed")) ~> route ~> check {
      val seed = Base58.tryDecodeWithLimit((responseAs[JsValue] \ "seed").as[String])
      seed shouldBe 'success
      seed.get.length shouldEqual UtilsApiRoute.DefaultSeedSize
    }
  }

  routePath("/seed/{length}") in forAll(Gen.posNum[Int]) { l =>
    if (l > UtilsApiRoute.MaxSeedSize) {
      Get(routePath(s"/seed/$l")) ~> route should produce(TooBigArrayAllocation)
    } else {
      Get(routePath(s"/seed/$l")) ~> route ~> check {
        val seed = Base58.tryDecodeWithLimit((responseAs[JsValue] \ "seed").as[String])
        seed shouldBe 'success
        seed.get.length shouldEqual l
      }
    }
  }

  for ((hash, f) <- Seq[(String, String => Array[Byte])](
         "secure" -> crypto.secureHash,
         "fast"   -> crypto.fastHash
       )) {
    val uri = routePath(s"/hash/$hash")
    uri in {
      forAll(Gen.alphaNumStr) { s =>
        Post(uri, s) ~> route ~> check {
          val r = responseAs[JsObject]
          (r \ "message").as[String] shouldEqual s
          (r \ "hash").as[String] shouldEqual Base58.encode(f(s))
        }
      }
    }
  }
}
