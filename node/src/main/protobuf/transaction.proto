// Transactions
syntax = "proto3";
option java_package = "com.wavesplatform.protobuf.transaction";
import "script.proto";
import "recipient.proto";
import "google/protobuf/empty.proto";

message AssetId {
    oneof asset {
        google.protobuf.Empty waves = 1;
        bytes issued_asset = 2;
    }
}

message AssetAmount {
    bytes asset_id = 1; // Shouldn't be empty
    int64 amount = 2;
}

message Amount {
    AssetId asset_id = 1;
    int64 amount = 2;
}

message SignedTransaction {
    Transaction transaction = 1;
    repeated bytes proofs = 2;
}

message Transaction {
    int32 chain_id = 1;
    bytes sender_public_key = 2;
    Amount fee = 3;
    int64 timestamp = 4;
    int32 version = 5;

    oneof data {
        GenesisTransactionData genesis = 101;
        PaymentTransactionData payment = 102;
        IssueTransactionData issue = 103;
        TransferTransactionData transfer = 104;
        ReissueTransactionData reissue = 105;
        BurnTransactionData burn = 106;
        ExchangeTransactionData exchange = 107;
        LeaseTransactionData lease = 108;
        LeaseCancelTransactionData lease_cancel = 109;
        CreateAliasTransactionData create_alias = 110;
        MassTransferTransactionData mass_transfer = 111;
        DataTransactionData data_transaction = 112;
        SetScriptTransactionData set_script = 113;
        SponsorFeeTransactionData sponsor_fee = 114;
        SetAssetScriptTransactionData set_asset_script = 115;
        InvokeScriptTransactionData invoke_script = 116;
    };
};

message GenesisTransactionData {
    bytes recipient_address = 1;
    int64 amount = 2;
};

message PaymentTransactionData {
    bytes recipient_address = 1;
    int64 amount = 2;
};

message TransferTransactionData {
    Recipient recipient = 1;
    Amount amount = 2;
    bytes attachment = 3;
};

message CreateAliasTransactionData {
    string alias = 1;
};

message DataTransactionData {
    message DataEntry {
        string key = 1;
        oneof value {
            int64 int_value = 10;
            bool bool_value = 11;
            bytes binary_value = 12;
            string string_value = 13;
        };
    };

    repeated DataEntry data = 1;
};

message MassTransferTransactionData {
    message Transfer {
        Recipient address = 1;
        int64 amount = 2;
    };

    AssetId asset_id = 1;
    repeated Transfer transfers = 2;
    bytes attachment = 3;
};

message LeaseTransactionData {
    Recipient recipient = 1;
    int64 amount = 2;
};

message LeaseCancelTransactionData {
    bytes lease_id = 1;
};

message BurnTransactionData {
    AssetAmount asset_amount = 1;
};

message IssueTransactionData {
    bytes name = 1;
    bytes description = 2;
    int64 amount = 3;
    int32 decimals = 4;
    bool reissuable = 5;
    Script script = 6;
};


message ReissueTransactionData {
    AssetAmount asset_amount = 1;
    bool reissuable = 2;
};

message SetAssetScriptTransactionData {
    bytes asset_id = 1;
    Script script = 2;
};

message SetScriptTransactionData {
    Script script = 2;
};

message ExchangeTransactionData {
    message BuySellOrders {
        Order buy_order = 1;
        Order sell_order = 2;
    }

    message MakerTakerOrders {
        Order maker_order = 1;
        Order taker_order = 2;
    }

    message Order {
        enum Side {
            BUY = 0;
            SELL = 1;
        };

        message AssetPair {
            bytes amount_asset_id = 1;
            bytes price_asset_id = 2;
        };

        int32 chain_id = 1;
        bytes sender_public_key = 2;
        bytes matcher_public_key = 3;
        AssetPair asset_pair = 4;
        Side order_side = 5;
        int64 amount = 6;
        int64 price = 7;
        int64 timestamp = 8;
        int64 expiration = 9;
        Amount matcher_fee = 10;
        int32 version = 11;
        repeated bytes proofs = 12;
    };

    int64 amount = 1;
    int64 price = 2;
    int64 buy_matcher_fee = 3;
    int64 sell_matcher_fee = 4;
    repeated Order orders = 5;
    int32 taker = 6;
};

message SponsorFeeTransactionData {
    AssetAmount min_fee = 1;
};

message InvokeScriptTransactionData {
    bytes dapp_address = 1;
    bytes function_call = 2;
    repeated Amount payments = 3;
}

message InvokeScriptResult {
    message Payment {
        bytes address = 1;
        Amount amount = 2;
    }

    repeated DataTransactionData.DataEntry data = 1;
    repeated Payment transfers = 2;
}
