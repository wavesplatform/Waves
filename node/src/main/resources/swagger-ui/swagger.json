{
  "openapi": "3.0.1",
  "info": {
    "title": "Waves Full Node (???)",
    "description": "The Web Interface to the Waves Full Node API",
    "termsOfService": "",
    "license": {
      "name": "MIT License",
      "url": "https://github.com/wavesplatform/Waves/blob/master/LICENSE"
    },
    "version": "???"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "addresses"
    },
    {
      "name": "blocks"
    },
    {
      "name": "peers"
    },
    {
      "name": "blockchain"
    },
    {
      "name": "transactions"
    },
    {
      "name": "utils"
    },
    {
      "name": "wallet"
    },
    {
      "name": "alias"
    },
    {
      "name": "assets"
    },
    {
      "name": "leasing"
    },
    {
      "name": "consensus"
    },
    {
      "name": "activation"
    },
    {
      "name": "debug"
    },
    {
      "name": "node"
    }
  ],
  "paths": {
    "/addresses": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Addresses",
        "description": "Get the wallet accounts addresses",
        "operationId": "root_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Create",
        "description": "Create a new account in the wallet(if it exists)",
        "operationId": "create_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/addresses/verify/{address}": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Verify",
        "description": "Check a signature of a message signed by an account",
        "operationId": "verify_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Json with data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "isValid"
                  ],
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addresses/seq/{from}/{to}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Seq",
        "description": "Get the wallet accounts addresses. Max range {from}-{to} is 100 addresses",
        "operationId": "seq_2",
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "Start address",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "path",
            "description": "address",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/seed/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Seed",
        "description": "Export seed value for the {address}",
        "operationId": "seed_2",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "seed"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "seed": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/addresses/publicKey/{publicKey}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Address from a public key",
        "description": "Generate an address from a public key. Public key should be Base58-encoded",
        "operationId": "publicKey_1",
        "parameters": [
          {
            "name": "publicKey",
            "in": "path",
            "description": "Public key Base58-encoded",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/balance/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Regular balance",
        "description": "Account regular balance",
        "operationId": "balance_2",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/balance": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Multiple accounts balances",
        "description": "Multiple accounts balances",
        "operationId": "balance_3",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Address",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "For balance at height requests",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Balance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/effectiveBalance/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Effective balance",
        "description": "Account effective balance",
        "operationId": "effectiveBalance_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/data/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Complete Data",
        "description": "Read all data posted by an account",
        "operationId": "getData_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matches",
            "in": "query",
            "description": "URL encoded (percent-encoded) <a href='https://www.tutorialspoint.com/scala/scala_regular_expressions.htm'>regular expression</a> to filter keys",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "Exact keys to query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataEntry"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Complete Data",
        "description": "Read all data posted by an account",
        "operationId": "postData_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "key": {
                    "type": "array",
                    "description": "Exact keys to query",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "array",
                    "description": "Exact keys to query",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataEntry"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "keys"
      }
    },
    "/addresses/sign/{address}": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Sign",
        "description": "Sign a message with a private key associated with {address}",
        "operationId": "sign_3",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message to sign as a plain string",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signed"
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "message"
      }
    },
    "/addresses/validate/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Validate",
        "description": "Check whether address {address} is valid or not",
        "operationId": "validate_2",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "valid"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "valid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/scriptInfo/{address}/meta": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Meta by address",
        "description": "Account script meta",
        "operationId": "scriptMeta_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptMeta"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/scriptInfo/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Account script info",
        "description": "Account script with an additional information",
        "operationId": "scriptInfo_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "complexity",
                    "extraFee"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "scriptText": {
                      "type": "string"
                    },
                    "complexity": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "extraFee": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{address}": {
      "delete": {
        "tags": [
          "addresses"
        ],
        "summary": "Delete",
        "description": "Remove the account with address {address} from the wallet",
        "operationId": "deleteAddress_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deleted"
                  ],
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/addresses/signText/{address}": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Sign",
        "description": "Sign a message with a private key associated with {address}",
        "operationId": "signText_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message to sign as a plain string",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signed"
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "message"
      }
    },
    "/addresses/verifyText/{address}": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Verify text",
        "description": "Check a signature of a message signed by an account",
        "operationId": "verifyText_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Json with data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "isValid"
                  ],
                  "type": "object",
                  "properties": {
                    "isValid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/addresses/balance/details/{address}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Account balances",
        "description": "Account available, regular, generating and effective balance",
        "operationId": "balanceDetails_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "available",
                    "effective",
                    "generating",
                    "regular"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "regular": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "generating": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "available": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "effective": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/balance/{address}/{confirmations}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Confirmed regular balance",
        "description": "Get the regular balance of the address within {confirmations} blocks back from the current height. {confirmations} supports return of balance not more than 2,000 blocks back",
        "operationId": "balanceWithConfirmations_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confirmations",
            "in": "path",
            "description": "0",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/effectiveBalance/{address}/{confirmations}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Confirmed effective balance",
        "description": "Get effective balance at the address of {confirmations} blocks from the current height. {confirmations} supports return of balance not more than 2000 blocks back",
        "operationId": "effectiveBalanceWithConfirmations_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confirmations",
            "in": "path",
            "description": "0",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balance"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/data/{address}/{key}": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Data by Key",
        "description": "Read data stored in account by key",
        "operationId": "getDataItem_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Data key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataEntry"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/signature/{signature}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block by signature",
        "description": "Get block by its signature",
        "operationId": "signature_1",
        "parameters": [
          {
            "name": "signature",
            "in": "path",
            "description": "Base58-encoded block signature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/blocks/{id}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block by id",
        "description": "Get block by its id",
        "operationId": "block_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base58-encoded block id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/first": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Genesis block",
        "description": "Get genesis block",
        "operationId": "first_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/address/{address}/{from}/{to}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Blocks produced by address",
        "description": "Get list of blocks generated by specified address. Max range {from}-{to} is 100 blocks",
        "operationId": "address_1",
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "Start block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "path",
            "description": "End block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocks/seq/{from}/{to}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block range",
        "description": "Get blocks at specified heights. Max range {from}-{to} is 100 blocks",
        "operationId": "seq",
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "Start block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "path",
            "description": "End block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocks/delay/{id}/{blockNum}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Average block delay",
        "description": "Average delay in milliseconds between last `blockNum` blocks starting from block with `id`",
        "operationId": "delay_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base58-encoded block id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockNum",
            "in": "path",
            "description": "Number of blocks to count delay",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "delay"
                  ],
                  "type": "object",
                  "properties": {
                    "delay": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocks/height": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Blockchain height",
        "description": "Get current blockchain height",
        "operationId": "height_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "height"
                  ],
                  "type": "object",
                  "properties": {
                    "height": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocks/at/{height}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block at height",
        "description": "Get block at specified height",
        "operationId": "at_1",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/last": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Last block",
        "description": "Get last block",
        "operationId": "last_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/height/{id}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block height",
        "description": "Height of a block by its id",
        "operationId": "heightEncoded_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base58-encoded block id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "height"
                  ],
                  "type": "object",
                  "properties": {
                    "height": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocks/headers/at/{height}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block header at height",
        "description": "Get block header at specified height",
        "operationId": "atHeaderOnly_1",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/headers/{id}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block header by id",
        "description": "Get header of specified block",
        "operationId": "block_header_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base58-encoded block id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/headers/seq/{from}/{to}": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Block header range",
        "description": "Get block headers at specified heights. Max range {from}-{to} is 100 blocks",
        "operationId": "seqHeaderOnly_1",
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "Start block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "to",
            "in": "path",
            "description": "End block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlockHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blocks/headers/last": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Last block header",
        "description": "Get last block header",
        "operationId": "lastHeaderOnly_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          }
        }
      }
    },
    "/peers/connect": {
      "post": {
        "tags": [
          "peers"
        ],
        "summary": "Connect to peer",
        "description": "Connect to peer",
        "operationId": "connect_1",
        "requestBody": {
          "description": "Json with data",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "host",
                  "port"
                ],
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "example": "127.0.0.1"
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "example": 6868
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "hostname",
                    "status"
                  ],
                  "type": "object",
                  "properties": {
                    "hostname": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/peers/clearblacklist": {
      "post": {
        "tags": [
          "peers"
        ],
        "summary": "Remove all blacklisted peers",
        "description": "Clear blacklist",
        "operationId": "clearBlacklist_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "result"
                  ],
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/peers/all": {
      "get": {
        "tags": [
          "peers"
        ],
        "summary": "Peer list",
        "description": "Peer list",
        "operationId": "allPeers_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "address",
                      "lastSeen"
                    ],
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "lastSeen": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/peers/connected": {
      "get": {
        "tags": [
          "peers"
        ],
        "summary": "Connected peers list",
        "description": "Connected peers list",
        "operationId": "connectedPeers_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "peers"
                  ],
                  "type": "object",
                  "properties": {
                    "peers": {
                      "type": "array",
                      "items": {
                        "required": [
                          "address",
                          "applicationName",
                          "applicationVersion",
                          "declaredAddress",
                          "peerName",
                          "peerNonce"
                        ],
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "declaredAddress": {
                            "type": "string"
                          },
                          "peerName": {
                            "type": "string"
                          },
                          "peerNonce": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "applicationName": {
                            "type": "string"
                          },
                          "applicationVersion": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/peers/blacklisted": {
      "get": {
        "tags": [
          "peers"
        ],
        "summary": "Blacklisted peers list",
        "description": "Blacklisted peers list",
        "operationId": "blacklistedPeers_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "hostname",
                      "reason",
                      "timestamp"
                    ],
                    "type": "object",
                    "properties": {
                      "hostname": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "reason": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/peers/suspended": {
      "get": {
        "tags": [
          "peers"
        ],
        "summary": "Suspended peers list",
        "description": "Suspended peers list",
        "operationId": "suspendedPeers_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "hostname",
                      "reason",
                      "timestamp"
                    ],
                    "type": "object",
                    "properties": {
                      "hostname": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "reason": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/rewards": {
      "get": {
        "tags": [
          "blockchain"
        ],
        "summary": "Current reward status",
        "description": "Get current miner’s reward status",
        "operationId": "rewards_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardStatus"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/rewards/{height}": {
      "get": {
        "tags": [
          "blockchain"
        ],
        "summary": "Reward status",
        "description": "Get miner’s reward status at height",
        "operationId": "rewardsAtHeight_1",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Target block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardStatus"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/status": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Transaction status",
        "description": "Get a transaction status by its ID. Max for 1,000 transactions",
        "operationId": "status_3",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Transaction ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStatus"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Transaction status",
        "description": "Get a transaction status by its ID",
        "operationId": "status_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Transaction IDs",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "array",
                    "description": "Transaction IDs",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionStatus"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ids"
      }
    },
    "/transactions/info/{id}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Transaction info",
        "description": "Get a transaction by its ID",
        "operationId": "info_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/sign": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Sign a transaction",
        "description": "Sign a transaction with the sender's private key",
        "operationId": "sign",
        "requestBody": {
          "description": "Transaction data including type",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "json"
      }
    },
    "/transactions/unconfirmed": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Unconfirmed transactions",
        "description": "Get a list of unconfirmed transactions",
        "operationId": "unconfirmed_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/address/{address}/limit/{limit}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "List of transactions by address",
        "description": "Get list of transactions where specified address has been involved. Max for 1,000 transactions. To get the next 1,000 transactions, use the field {after}.",
        "operationId": "addressLimit_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Number of transactions to be returned",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Id of transaction to paginate after",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/unconfirmed/size": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Number of unconfirmed transactions",
        "description": "Get the number of unconfirmed transactions in the UTX pool",
        "operationId": "utxSize_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "size"
                  ],
                  "type": "object",
                  "properties": {
                    "size": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/unconfirmed/info/{id}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Unconfirmed transaction info",
        "description": "Get an unconfirmed transaction by its ID",
        "operationId": "utxTransactionInfo_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/calculateFee": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Calculate transaction fee",
        "description": "Calculates minimal fee for a transaction",
        "operationId": "calculateFee_1",
        "requestBody": {
          "description": "Transaction data including type",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "feeAmount",
                    "feeAssetId"
                  ],
                  "type": "object",
                  "properties": {
                    "feeAssetId": {
                      "type": "string"
                    },
                    "feeAmount": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "json"
      }
    },
    "/transactions/sign/{signerAddress}": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Sign a transaction with a non-default private key",
        "description": "Sign a transaction with the private key corresponding to the given address",
        "operationId": "signWithSigner_1",
        "parameters": [
          {
            "name": "signerAddress",
            "in": "path",
            "description": "Wallet address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Transaction data including type, see <a href='https://docs.waves.tech/en/blockchain/transaction/'>documentation</a>",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "json"
      }
    },
    "/transactions/broadcast": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Broadcast transaction",
        "description": "Broadcast a signed transaction. You should use the JSON transaction format with proofs",
        "operationId": "signedBroadcast_1",
        "requestBody": {
          "description": "Transaction data including type and signature/proofs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "json"
      }
    },
    "/transactions/merkleProof": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Merkle proofs",
        "description": "Get merkle proofs for transactions",
        "operationId": "merkle_proof_1",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Transaction ID",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionMerkleProofs"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Merkle proofs",
        "description": "Get merkle proofs for transactions",
        "operationId": "merkle_proof_2",
        "requestBody": {
          "description": "Transaction IDs",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ids"
                ],
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionMerkleProofs"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ids"
      }
    },
    "/utils/seed/{length}": {
      "get": {
        "tags": [
          "utils"
        ],
        "summary": "Seed of specified length",
        "description": "Generate random seed of specified length",
        "operationId": "length_1",
        "parameters": [
          {
            "name": "length",
            "in": "path",
            "description": "Seed length ",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "seed"
                  ],
                  "type": "object",
                  "properties": {
                    "seed": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/utils/script/compile": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Compile",
        "description": "Compiles string code to base64 script representation",
        "operationId": "compile_1",
        "requestBody": {
          "description": "Script code",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompiledScript"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "code"
      }
    },
    "/utils/time": {
      "get": {
        "tags": [
          "utils"
        ],
        "summary": "Time",
        "description": "Current Node time (UTC)",
        "operationId": "time_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "NTP",
                    "system"
                  ],
                  "type": "object",
                  "properties": {
                    "system": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "NTP": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/utils/script/decompile": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Decompile",
        "description": "Decompiles base64 script representation to string code",
        "operationId": "decompile_1",
        "requestBody": {
          "description": "Script code",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "script"
                  ],
                  "type": "object",
                  "properties": {
                    "script": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "code"
      }
    },
    "/utils/script/compileCode": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Compile script",
        "description": "Compiles string code to base64 script representation",
        "operationId": "compileCode_1",
        "requestBody": {
          "description": "Script code with imports",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompiledScript"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "code"
      }
    },
    "/utils/script/compileWithImports": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Compile script",
        "description": "Compiles string code with imports to base64 script representation",
        "operationId": "compileWithImports_1",
        "requestBody": {
          "description": "Script code with imports",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "imports",
                  "script"
                ],
                "type": "object",
                "properties": {
                  "script": {
                    "type": "string"
                  },
                  "imports": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompiledScript"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "code"
      }
    },
    "/utils/script/estimate": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Estimate",
        "description": "Estimates compiled code in Base64 representation",
        "operationId": "estimate_1",
        "requestBody": {
          "description": "A compiled Base64 code",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "complexity",
                    "extraFee",
                    "script",
                    "scriptText"
                  ],
                  "type": "object",
                  "properties": {
                    "script": {
                      "type": "string"
                    },
                    "scriptText": {
                      "type": "string"
                    },
                    "complexity": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "extraFee": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "code"
      }
    },
    "/utils/script/meta": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "DApp meta",
        "description": "Extract DApp meta from compiled code in Base64 representation",
        "requestBody": {
          "description": "A compiled Base64 code",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptMeta"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "code"
      }
    },
    "/utils/seed": {
      "get": {
        "tags": [
          "utils"
        ],
        "summary": "Seed",
        "description": "Generate random seed",
        "operationId": "seedRoute_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "seed"
                  ],
                  "type": "object",
                  "properties": {
                    "seed": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        }
      }
    },
    "/utils/hash/secure": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Hash",
        "description": "Return SecureCryptographicHash of specified message",
        "operationId": "hashSecure_1",
        "requestBody": {
          "description": "Message to hash",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashedMessage"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "message"
      }
    },
    "/utils/hash/fast": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Hash",
        "description": "Return FastCryptographicHash of specified message",
        "operationId": "hashFast_1",
        "requestBody": {
          "description": "Message to hash",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashedMessage"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "message"
      }
    },
    "/utils/transactionSerialize": {
      "post": {
        "tags": [
          "utils"
        ],
        "summary": "Serialize transaction",
        "description": "Serialize transaction",
        "operationId": "transactionSerialize_1",
        "requestBody": {
          "description": "Transaction data including type and signature/proofs",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "bytes"
                  ],
                  "type": "object",
                  "properties": {
                    "bytes": {
                      "type": "array",
                      "items": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "json"
      }
    },
    "/wallet/seed": {
      "get": {
        "tags": [
          "wallet"
        ],
        "summary": "Seed",
        "description": "Export wallet seed",
        "operationId": "seed",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "seed"
                  ],
                  "type": "object",
                  "properties": {
                    "seed": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/alias/by-alias/{alias}": {
      "get": {
        "tags": [
          "alias"
        ],
        "summary": "Address by alias",
        "description": "Returns an address associated with an Alias. Alias should be plain text without an 'alias' prefix and network code.",
        "operationId": "addressOfAlias_1",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Alias",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alias/by-address/{address}": {
      "get": {
        "tags": [
          "alias"
        ],
        "summary": "Aliases by address",
        "description": "Returns a collection of aliases associated with an address",
        "operationId": "aliasOfAddress_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aliases",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets/balance/{address}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Account balance",
        "description": "Account balances for all assets",
        "operationId": "balances_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "balances"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "balances": {
                      "type": "array",
                      "items": {
                        "required": [
                          "assetId",
                          "balance",
                          "issueTransaction",
                          "minSponsoredAssetFee",
                          "quantity",
                          "reissuable",
                          "sponsorBalance"
                        ],
                        "type": "object",
                        "properties": {
                          "assetId": {
                            "type": "string"
                          },
                          "balance": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "reissuable": {
                            "type": "boolean"
                          },
                          "minSponsoredAssetFee": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "sponsorBalance": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "quantity": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "issueTransaction": {
                            "$ref": "#/components/schemas/IssueTransaction"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets/details/{assetId}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Information about an asset",
        "description": "Provides detailed information about given asset",
        "operationId": "asset_details",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetails"
                }
              }
            }
          }
        }
      }
    },
    "/assets/details": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Information about the multiple assets",
        "description": "Provides detailed information about the given assets",
        "operationId": "asset_details_array",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the asset",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets/balance/{address}/{assetId}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Asset's balance",
        "description": "Account balance by given asset",
        "operationId": "balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "assetId",
                    "balance"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "assetId": {
                      "type": "string"
                    },
                    "balance": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets/{assetId}/distribution": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Asset balance distribution",
        "description": "Asset balance distribution by account",
        "operationId": "balanceDistribution_1",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDistribution"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/assets/{assetId}/distribution/{height}/limit/{limit}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Asset balance distribution at height",
        "description": "Asset balance distribution by account at specified height. Max for 10,000 addresses",
        "operationId": "balanceDistributionAtHeight_1",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "path",
            "description": "Height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Number of addresses to be returned",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "address to paginate after",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDistribution"
                }
              }
            }
          }
        }
      }
    },
    "/assets/nft/{address}/limit/{limit}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Account NFTs balance",
        "description": "Account NFTs balance. Max for 1,000 tokens",
        "operationId": "nft_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Number of tokens to be returned",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Id of token to paginate after",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/leasing/active/{address}": {
      "get": {
        "tags": [
          "leasing"
        ],
        "summary": "Active leases for an address",
        "description": "Get all active leases for an address",
        "operationId": "active_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Wallet address ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lease transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseTransaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/consensus/generatingbalance/{address}": {
      "get": {
        "tags": [
          "consensus"
        ],
        "summary": "Generating balance",
        "description": "Account generating balance",
        "operationId": "generatingBalance_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "balance"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "balance": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/consensus/basetarget/{blockId}": {
      "get": {
        "tags": [
          "consensus"
        ],
        "summary": "Base target",
        "description": "base target of a block with specified id",
        "operationId": "baseTargetId_1",
        "parameters": [
          {
            "name": "blockId",
            "in": "path",
            "description": "Block id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "baseTarget"
                  ],
                  "type": "object",
                  "properties": {
                    "baseTarget": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/consensus/basetarget": {
      "get": {
        "tags": [
          "consensus"
        ],
        "summary": "Base target last",
        "description": "Base target of a last block",
        "operationId": "basetarget_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "baseTarget",
                    "score"
                  ],
                  "type": "object",
                  "properties": {
                    "baseTarget": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "score": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/consensus/algo": {
      "get": {
        "tags": [
          "consensus"
        ],
        "summary": "Consensus algo",
        "description": "Shows which consensus algo being using",
        "operationId": "algo_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "consensusAlgo"
                  ],
                  "type": "object",
                  "properties": {
                    "consensusAlgo": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activation/status": {
      "get": {
        "tags": [
          "activation"
        ],
        "summary": "Activation status",
        "description": "Activation status of the blockchain features",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "features",
                    "height",
                    "nextCheck",
                    "votingInterval",
                    "votingThreshold"
                  ],
                  "type": "object",
                  "properties": {
                    "height": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "votingInterval": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "votingThreshold": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "nextCheck": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "required": [
                          "blockchainStatus",
                          "description",
                          "id",
                          "nodeStatus"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "description": {
                            "type": "string"
                          },
                          "blockchainStatus": {
                            "type": "string",
                            "enum": [
                              "VOTING",
                              "APPROVED",
                              "ACTIVATED"
                            ]
                          },
                          "nodeStatus": {
                            "type": "string",
                            "enum": [
                              "NOT_IMPLEMENTED",
                              "IMPLEMENTED",
                              "VOTED"
                            ]
                          },
                          "activationHeight": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "supportingBlocks": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/debug/print": {
      "post": {
        "tags": [
          "debug"
        ],
        "summary": "Print",
        "description": "Prints a string at DEBUG level, strips to 100 chars",
        "operationId": "print_1",
        "requestBody": {
          "description": "Json with data",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "message"
                ],
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/debug/state": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "Regular address balance",
        "description": "Regular address balance at the current height",
        "operationId": "state_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "description": "map of address <-> balance",
                  "example": {
                    "addr1": 0,
                    "addr2": 100
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/info": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "State",
        "description": "All info you need to debug",
        "operationId": "info",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "extensionLoaderState",
                    "historyReplierCacheSizes",
                    "microBlockSynchronizerCacheSizes",
                    "minerState",
                    "scoreObserverStats",
                    "stateHeight"
                  ],
                  "type": "object",
                  "properties": {
                    "stateHeight": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "extensionLoaderState": {
                      "type": "string"
                    },
                    "historyReplierCacheSizes": {
                      "required": [
                        "awaiting",
                        "microBlockOwners",
                        "nextInvs",
                        "successfullyReceived"
                      ],
                      "type": "object",
                      "properties": {
                        "microBlockOwners": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "nextInvs": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "awaiting": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "successfullyReceived": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "microBlockSynchronizerCacheSizes": {
                      "required": [
                        "awaiting",
                        "microBlockOwners",
                        "nextInvs",
                        "successfullyReceived"
                      ],
                      "type": "object",
                      "properties": {
                        "microBlockOwners": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "nextInvs": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "awaiting": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "successfullyReceived": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "scoreObserverStats": {
                      "required": [
                        "currentBestChannel",
                        "localScore",
                        "scoresCacheSize"
                      ],
                      "type": "object",
                      "properties": {
                        "localScore": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "currentBestChannel": {
                          "type": "string"
                        },
                        "scoresCacheSize": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "minerState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/blocks/{howMany}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "Blocks",
        "description": "Get sizes and full hashes for last blocks",
        "operationId": "blocks_1",
        "parameters": [
          {
            "name": "howMany",
            "in": "path",
            "description": "How many last blocks to take",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sizes and full hashes",
            "content": {}
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/stateHash/{height}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "State hash",
        "description": "Get state hash at height",
        "operationId": "state_hash",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Target block height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "State hash",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "blockId": {
                      "type": "string"
                    },
                    "wavesBalanceHash": {
                      "type": "string"
                    },
                    "assetsBalanceHash": {
                      "type": "string"
                    },
                    "dataEntryHash": {
                      "type": "string"
                    },
                    "accountScriptHash": {
                      "type": "string"
                    },
                    "assetScriptHash": {
                      "type": "string"
                    },
                    "leaseBalanceHash": {
                      "type": "string"
                    },
                    "leaseStatusHash": {
                      "type": "string"
                    },
                    "sponsorshipHash": {
                      "type": "string"
                    },
                    "aliasHash": {
                      "type": "string"
                    },
                    "stateHash": {
                      "type": "string"
                    }
                  }
                }  
              }
            }
          }
        }
      }
    },
    "/debug/blacklist": {
      "post": {
        "tags": [
          "debug"
        ],
        "summary": "Blacklist given peer",
        "description": "Moving peer to blacklist",
        "operationId": "blacklist_1",
        "requestBody": {
          "description": "IP address of node",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          },
          "404": {
            "description": "There are no peer with such address",
            "content": {}
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "address"
      }
    },
    "/debug/portfolios/{address}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "Portfolio",
        "description": "Get current portfolio considering pessimistic transactions in the UTX pool",
        "operationId": "portfolios_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An address of portfolio",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "considerUnspent",
            "in": "query",
            "description": "Taking into account pessimistic transactions from UTX pool",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "assets",
                    "balance",
                    "lease"
                  ],
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "lease": {
                      "required": [
                        "in",
                        "out"
                      ],
                      "type": "object",
                      "properties": {
                        "in": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "out": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "assets": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "description": "map of assetId <-> balance",
                      "example": {
                        "assetId1": 0,
                        "assetId2": 100
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/rollback-to/{id}": {
      "delete": {
        "tags": [
          "debug"
        ],
        "summary": "Block id",
        "description": "Rollback the state to the block with a given id",
        "operationId": "rollbackTo_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Base58-encoded block id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "BlockId"
                  ],
                  "type": "object",
                  "properties": {
                    "BlockId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/validate": {
      "post": {
        "tags": [
          "debug"
        ],
        "summary": "Validate Transaction",
        "description": "Validates a transaction and measures time spent in milliseconds. You should use the JSON transaction format with proofs",
        "operationId": "validate",
        "requestBody": {
          "description": "Signed transaction",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "trace",
                    "valid",
                    "validationTime"
                  ],
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    },
                    "validationTime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "trace": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "transaction"
      }
    },
    "/debug/balances/history/{address}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "History of the regular balance",
        "description": "History of the regular balance for the last 3,000 blocks",
        "operationId": "balanceHistory_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An address to load waves balance history for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "required": [
                      "balance",
                      "height"
                    ],
                    "type": "object",
                    "properties": {
                      "height": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "balance": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/debug/stateWaves/{height}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "Regular address balance at the height",
        "description": "Regular address balance at the height. No more than 2,000 blocks back",
        "operationId": "stateWaves_1",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "height",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "description": "map of address <-> balance",
                  "example": {
                    "addr1": 0,
                    "addr2": 100
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/rollback": {
      "post": {
        "tags": [
          "debug"
        ],
        "summary": "Rollback to height",
        "description": "Removes all blocks after the given height. Max for 2,000 blocks",
        "operationId": "rollback_1",
        "requestBody": {
          "description": "Json with data",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "returnTransactionsToUtx",
                  "rollbackTo"
                ],
                "type": "object",
                "properties": {
                  "rollbackTo": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "returnTransactionsToUtx": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "BlockId"
                  ],
                  "type": "object",
                  "properties": {
                    "BlockId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/debug/minerInfo": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "State",
        "description": "All miner info you need to debug",
        "operationId": "minerInfo_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "address",
                    "miningBalance",
                    "timestamp"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "miningBalance": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/configInfo": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "Config",
        "description": "Currently running node config",
        "operationId": "configInfo_1",
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "description": "Exposes full typesafe config",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Json config",
            "content": {}
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/debug/stateChanges/info/{id}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "Transaction state changes",
        "description": "Returns state changes made by the transaction",
        "operationId": "stateChangesById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateChanges"
                }
              }
            }
          }
        }
      }
    },
    "/debug/stateChanges/address/{address}/limit/{limit}": {
      "get": {
        "tags": [
          "debug"
        ],
        "summary": "List of transactions by address with state changes",
        "description": "Get list of transactions with state changes where specified address has been involved. Max for 1,000 transactions. To get the next 1,000 transactions, use the field {after}.",
        "operationId": "stateChangesByAddress_1",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "path",
            "description": "Number of transactions to be returned",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Id of transaction to paginate after",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StateChanges"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/node/stop": {
      "post": {
        "tags": [
          "node"
        ],
        "summary": "Stop",
        "description": "Stop the node",
        "operationId": "stop_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "stopped"
                  ],
                  "type": "object",
                  "properties": {
                    "stopped": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Provided API key is not correct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "error": 2,
                  "message": "Provided API key is not correct"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKey": []
          }
        ]
      }
    },
    "/node/status": {
      "get": {
        "tags": [
          "node"
        ],
        "summary": "Status",
        "description": "Get status of the running core",
        "operationId": "status_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "blockchainHeight",
                    "stateHeight",
                    "updatedDate",
                    "updatedTimestamp"
                  ],
                  "type": "object",
                  "properties": {
                    "blockchainHeight": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "stateHeight": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "updatedTimestamp": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "updatedDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/node/version": {
      "get": {
        "tags": [
          "node"
        ],
        "summary": "Version",
        "description": "Get Waves node version",
        "operationId": "version_1",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "version"
                  ],
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiError": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AssetDistribution": {
        "required": [
          "hasNext",
          "last",
          "values"
        ],
        "type": "object",
        "properties": {
          "hasNext": {
            "type": "boolean"
          },
          "last": {
            "type": "string"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "description": "map of assetId <-> balance",
            "example": {
              "assetId1": 0,
              "assetId2": 100
            }
          }
        }
      },
      "AssetDetails": {
        "type": "object",
        "required": [
          "assetId",
          "decimals",
          "description",
          "issueHeight",
          "issueTimestamp",
          "issuer",
          "minSponsoredAssetFee",
          "name",
          "quantity",
          "reissuable",
          "scriptDetails",
          "scripted"
        ],
        "properties": {
          "assetId": {
            "type": "string"
          },
          "issueHeight": {
            "type": "integer",
            "format": "int32"
          },
          "issueTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "issuer": {
            "type": "string"
          },
          "issuerPublicKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "decimals": {
            "type": "integer",
            "format": "int32"
          },
          "reissuable": {
            "type": "boolean"
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "scripted": {
            "type": "boolean"
          },
          "minSponsoredAssetFee": {
            "type": "integer",
            "format": "int64"
          },
          "originTransactionId": {
            "type": "string"
          },
          "scriptDetails": {
            "type": "object",
            "required": [
              "script",
              "scriptComplexity",
              "scriptText"
            ],
            "properties": {
              "scriptComplexity": {
                "type": "integer",
                "format": "int32"
              },
              "script": {
                "type": "string",
                "format": "byte"
              },
              "scriptText": {
                "type": "string"
              }
            }
          }
        }
      },
      "Balance": {
        "required": [
          "address",
          "balance",
          "confirmations"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "confirmations": {
            "type": "integer",
            "format": "int32"
          },
          "balance": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Block": {
        "required": [
          "blocksize",
          "generator",
          "height",
          "nxt-consensus",
          "reference",
          "signature",
          "timestamp",
          "totalFee",
          "transactionCount",
          "transactions",
          "version",
          "VRF",
          "transactionsRoot"
        ],
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "totalFee": {
            "type": "integer",
            "format": "int64"
          },
          "reference": {
            "type": "string"
          },
          "generator": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nxt-consensus": {
            "required": [
              "base-target",
              "generation-signature"
            ],
            "type": "object",
            "properties": {
              "base-target": {
                "type": "integer",
                "format": "int64"
              },
              "generation-signature": {
                "type": "string"
              }
            }
          },
          "blocksize": {
            "type": "integer",
            "format": "int32"
          },
          "transactionCount": {
            "type": "integer",
            "format": "int32"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "reward": {
            "type": "integer",
            "format": "int64"
          },
          "desiredReward": {
            "type": "integer",
            "format": "int64"
          },
          "VRF": {
              "type": "string"
          },
          "transactionsRoot": {
              "type": "string"
          }
        }
      },
      "BlockHeader": {
        "required": [
          "blocksize",
          "generator",
          "height",
          "nxt-consensus",
          "reference",
          "signature",
          "timestamp",
          "totalFee",
          "transactionCount",
          "version",
          "VRF",
          "transactionsRoot"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "totalFee": {
            "type": "integer",
            "format": "int64"
          },
          "reference": {
            "type": "string"
          },
          "generator": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nxt-consensus": {
            "required": [
              "base-target",
              "generation-signature"
            ],
            "type": "object",
            "properties": {
              "base-target": {
                "type": "integer",
                "format": "int64"
              },
              "generation-signature": {
                "type": "string"
              }
            }
          },
          "blocksize": {
            "type": "integer",
            "format": "int32"
          },
          "transactionCount": {
            "type": "integer",
            "format": "int32"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "reward": {
            "type": "integer",
            "format": "int64"
          },
          "desiredReward": {
            "type": "integer",
            "format": "int64"
          },
          "VRF": {
              "type": "string"
          },
          "transactionsRoot": {
              "type": "string"
          }
        }
      },
      "CompiledScript": {
        "required": [
          "complexity",
          "extraFee",
          "script"
        ],
        "type": "object",
        "properties": {
          "script": {
            "type": "string",
            "format": "byte"
          },
          "complexity": {
            "type": "integer",
            "format": "int32"
          },
          "extraFee": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ScriptMeta": {
        "required": [
          "callableFuncTypes",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "isArrayArguments": {
            "type": "boolean"
          },
          "callableFuncTypes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "required": [
                  "name",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "BinaryEntry": {
        "required": [
          "key",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["binary"]
          },
          "value": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "BooleanEntry": {
        "required": [
          "key",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["boolean"]
          },
          "value": {
            "type": "boolean"
          }
        }
      },
      "DataEntry": {
        "required": [
          "key",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "integer",
              "boolean",
              "binary",
              "string"
            ]
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "properties": {},
            "description": "integer/boolean/binary/string value"
          }
        }
      },
      "DeleteEntry": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object",
            "properties": {},
            "description": "null for entry deletion"
          }
        }
      },
      "IntegerEntry": {
        "required": [
          "key",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["integer"]
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StringEntry": {
        "required": [
          "key",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["string"]
          },
          "value":{
            "type": "string"
          }
        }
      },
      "HashedMessage": {
        "required": [
          "hash",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "matcherPublicKey": {
            "type": "string"
          },
          "assetPair": {
            "type": "object",
            "properties": {
              "amountAsset": {
                "type": "string",
                "nullable": true
              },
              "priceAsset": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "orderType": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "expiration": {
            "type": "integer",
            "format": "int64"
          },
          "matcherFee": {
            "type": "integer",
            "format": "int64"
          },
          "signature": {
            "type": "string"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matcherFeeAssetId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RewardStatus": {
        "required": [
          "currentReward",
          "height",
          "minIncrement",
          "nextCheck",
          "term",
          "totalWavesAmount",
          "votes",
          "votingInterval",
          "votingIntervalStart",
          "votingThreshold"
        ],
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "totalWavesAmount": {
            "type": "integer",
            "format": "int64"
          },
          "currentReward": {
            "type": "integer",
            "format": "int64"
          },
          "minIncrement": {
            "type": "integer",
            "format": "int64"
          },
          "term": {
            "type": "integer",
            "format": "int32"
          },
          "nextCheck": {
            "type": "integer",
            "format": "int32"
          },
          "votingIntervalStart": {
            "type": "integer",
            "format": "int32"
          },
          "votingInterval": {
            "type": "integer",
            "format": "int32"
          },
          "votingThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "votes": {
            "required": [
              "decrease",
              "increase"
            ],
            "type": "object",
            "properties": {
              "increase": {
                "type": "integer",
                "format": "int32"
              },
              "decrease": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "Signed": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "plain text"
          },
          "publicKey": {
            "type": "string",
            "description": "Base58-encoded public key"
          },
          "signature": {
            "type": "string",
            "description": "Base58-encoded signature"
          }
        }
      },
      "StateChanges": {
        "required": [
          "height",
          "id",
          "stateChanges"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "stateChanges": {
            "required": [
              "data",
              "transfers"
            ],
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "required": [
                    "key",
                    "type",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "integer",
                      "enum": [
                        "integer",
                        "boolean",
                        "binary",
                        "string"
                      ]
                    },
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              },
              "transfers": {
                "type": "array",
                "items": {
                  "required": [
                    "address",
                    "amount",
                    "asset"
                  ],
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "asset": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "description": "Transaction's JSON representation (see <a href='https://docs.wavesplatform.com/en/blockchain/transaction/'>documentation</a>)",
        "example": {
          "id": "string",
          "timestamp": 0,
          "version": 2,
          "...": "..."
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BurnTransaction"
          },
          {
            "$ref": "#/components/schemas/CreateAliasTransaction"
          },
          {
            "$ref": "#/components/schemas/DataTransaction"
          },
          {
            "$ref": "#/components/schemas/ExchangeTransaction"
          },
          {
            "$ref": "#/components/schemas/GenesisTransaction"
          },
          {
            "$ref": "#/components/schemas/InvokeScriptTransaction"
          },
          {
            "$ref": "#/components/schemas/IssueTransaction"
          },
          {
            "$ref": "#/components/schemas/LeaseCancelTransaction"
          },
          {
            "$ref": "#/components/schemas/LeaseTransaction"
          },
          {
            "$ref": "#/components/schemas/MassTransferTransaction"
          },
          {
            "$ref": "#/components/schemas/ReissueTransaction"
          },
          {
            "$ref": "#/components/schemas/SetAssetScriptTransaction"
          },
          {
            "$ref": "#/components/schemas/SetScriptTransaction"
          },
          {
            "$ref": "#/components/schemas/SponsorFeeTransaction"
          },
          {
            "$ref": "#/components/schemas/TransferTransaction"
          },
          {
            "$ref": "#/components/schemas/UpdateAssetInfoTransaction"
          }
        ]
      },
      "TransactionStatus": {
        "required": [
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "confirmed",
              "unconfirmed",
              "not_found"
            ]
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "confirmations": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          }
        }
      },
      "TransactionMerkleProofs": {
        "required": [
          "id",
          "merkleProof",
          "transactionIndex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "transactionIndex": {
            "type": "integer",
            "format": "int32"
          },
          "merkleProof": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BurnTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "assetId",
          "amount",
          "chainId",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateAliasTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "alias",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "alias": {
            "type": "string"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DataTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "data",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BinaryEntry"
                },
                {
                  "$ref": "#/components/schemas/BooleanEntry"
                },
                {
                  "$ref": "#/components/schemas/DeleteEntry"
                },
                {
                  "$ref": "#/components/schemas/IntegerEntry"
                },
                {
                  "$ref": "#/components/schemas/StringEntry"
                }
              ]
            }
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExchangeTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "order1",
          "order2",
          "amount",
          "price",
          "buyMatcherFee",
          "sellMatcherFee",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "order1": {
            "$ref": "#/components/schemas/Order"
          },
          "order2": {
            "$ref": "#/components/schemas/Order"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "type": "integer",
            "format": "int64"
          },
          "buyMatcherFee": {
            "type": "integer",
            "format": "int64"
          },
          "sellMatcherFee": {
            "type": "integer",
            "format": "int64"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GenesisTransaction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recipient": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InvokeScriptTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "dApp",
          "payment",
          "call",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "dApp": {
            "type": "string"
          },
          "payment": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "integer",
                  "format": "int64"
                },
                "assetId": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "call": {
            "type": "object",
            "properties": {
              "function": {
                "type": "string"
              },
              "args": {
                "type": "array",
                "items": {
                  "required": [
                    "type",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "binary",
                        "boolean",
                        "integer",
                        "list",
                        "string"
                      ]
                    },
                    "value": {
                      "type": "object",
                      "properties": {},
                      "description": "binary/boolean/integer/string value or list of { type, value } objects"
                    }
                  }
                }
              }
            }
          },
          "applicationStatus": {
                "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IssueTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "assetId",
          "name",
          "quantity",
          "reissuable",
          "decimals",
          "description",
          "script",
          "chainId",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "reissuable": {
            "type": "boolean"
          },
          "decimals": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "script": {
            "type": "string",
            "format": "byte"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LeaseCancelTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "leaseId",
          "chainId",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "leaseId": {
            "type": "string"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "lease": {
            "$ref": "#/components/schemas/LeaseTransaction"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
             "format": "int32"
          }
        }
      },
      "LeaseTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "amount",
          "recipient",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "recipient": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MassTransferTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "assetId",
          "attachment",
          "transfersCount",
          "totalAmount",
          "transfers",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string",
            "nullable": true
          },
          "attachment": {
            "type": "string"
          },
          "transferCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalAmount": {
            "type": "integer",
            "format": "int64"
          },
          "transfers": {
            "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReissueTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "assetId",
          "quantity",
          "reissuable",
          "chainId",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          },
          "reissuable": {
            "type": "boolean"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SetAssetScriptTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "assetId",
          "script",
          "chainId",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string"
          },
          "script": {
            "type": "string",
            "format": "byte"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SetScriptTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "script",
          "chainId",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "script": {
            "type": "string",
            "format": "byte"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SponsorFeeTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "assetId",
          "minSponsoredAssetFee",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string"
          },
          "minSponsoredAssetFee": {
            "type": "integer",
            "format": "int64"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TransferTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "recipient",
          "assetId",
          "amount",
          "attachment",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "chainId": {
            "type": "integer",
            "format": "int32"
          },
          "recipient": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "feeAsset": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "attachment": {
            "type": "string"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }  
      },
      "UpdateAssetInfoTransaction": {
        "type": "object",
        "required": [
          "type",
          "id",
          "sender",
          "senderPublicKey",
          "fee",
          "feeAssetId",
          "timestamp",
          "proofs",
          "version",
          "chainId",
          "assetId",
          "name",
          "description",
          "applicationStatus"
        ],
        "properties": {
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "senderPublicKey": {
            "type": "string"
          },
          "fee": {
            "type": "integer",
            "format": "int64"
          },
          "feeAssetId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "proofs": {
            "type": "array",
            "items": {
                "type": "string"
            }
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "assetId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "applicationStatus": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "responses": {
      "ApiKeyNotValid": {
        "description": "Provided API key is not correct",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            },
            "example": {
              "error": 2,
              "message": "Provided API key is not correct"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "APIKey": {
        "type": "apiKey",
        "name": "X-API-Key",
        "in": "header"
      }
    }
  }
}